// import React, { useState, Dispatch, SetStateAction } from "react";
// import { Formik, Form, Field, ErrorMessage, FieldProps } from "formik";
// import Image from "next/image";

// import * as Yup from "yup";

// type SubmitExchangeDetails = {
//   title: string;
//   zoneOneBanner: File | null;
// };

// type SubmitExchangeFormProps = {
//   initialValues: SubmitExchangeDetails;
//   validationSchema: object;
//   onSubmit: (values: SubmitExchangeDetails, formikHelpers: any) => void;
//   setFormValues: Dispatch<SetStateAction<SubmitExchangeDetails>>;
// };

// const SubmitExchangeForm: React.FC<SubmitExchangeFormProps> = ({
//   initialValues,
//   validationSchema,
//   onSubmit,
//   setFormValues,
// }) => {
//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, actions) => {
//         console.log("Collected Data from Child:", values);
//         setFormValues(values); // Ensure this matches SubmitExchangeDetails
//         onSubmit(values, actions);
//       }}
//       enableReinitialize
//     >
//       {({ handleSubmit }) => (
//         <Form>
//           {/* Add your form fields here */}

//           <button
//             type="submit"
//             onClick={() => {
//               console.log("Handle Submit Triggered");
//               handleSubmit();
//             }}
//           >
//             Submit
//           </button>
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitExchangeForm;

// type SubmitExchangeFormProps = {
//   initialValues: SubmitExchangeDetails;
//   validationSchema: object;
//   onSubmit: (values: SubmitExchangeDetails, formikHelpers: any) => void;
//   setFormValues: Dispatch<SetStateAction<SubmitExchangeDetails>>;
// };

// const SubmitExchangeForm: React.FC<SubmitExchangeFormProps> = ({
//   initialValues,
//   validationSchema,
//   onSubmit,
//   setFormValues,
// }) => {
//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = useState<
//     string | null
//   >(null);

//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, actions) => {
//         console.log("Collected Data from child (onSubmit):", values);
//         setFormValues(values); // Update parent formValues state
//         onSubmit(values, actions); // Trigger parent onSubmit
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, handleSubmit, isValid, dirty }) => (
//         <Form>
//           {/* Title Field */}
//           <div className="mt-4">
//             <label htmlFor="title" className="block font-semibold">
//               Title of the offer
//             </label>
//             <Field
//               id="title"
//               name="title"
//               placeholder="Enter title"
//               className="w-full p-2 border rounded-md"
//             />
//             <ErrorMessage
//               name="title"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Zone One Banner */}
//           <div className="mt-4">
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               Upload Zone One Banner
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;
//                     setFieldValue("zoneOneBanner", file);

//                     // Update preview
//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Debugging Info */}
//           <div className="mt-4">
//             <p>Form Valid: {isValid ? "Yes" : "No"}</p>
//             <p>Form Dirty: {dirty ? "Yes" : "No"}</p>
//           </div>

//           {/* Next Button */}
//           <div className="flex justify-end mt-4">
//             <button
//               type="submit"
//               className="bg-blue-500 text-white py-2 px-4 rounded-md"
//             >
//               Next
//             </button>
//           </div>
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitExchangeForm;

// // Define the props type
// type SubmitExchangeDetails = {
//   zoneOneBanner: File | null;
//   title: string;
//   offerType: string;
//   category: string;
//   subcategory: string;
//   featuredProductStatus: "New" | "GoodCondition" | "Used" | "";
//   additionalDescription: string;
//   images: (File | null)[];
//   startDate: string;
//   endDate: string;
//   materialConditions: {
//     estimatedValue: string;
//     decision: "yes" | "no";
//     depositPayment: { percentage: string };
//     otherContingentCoverageRequired: string;
//   };
//   guarantees: {
//     moneyBackGuarantee: "yes" | "no";
//     satisfactionGuarantee: "yes" | "no";
//   };
//   paymentDetails: {
//     desiredPaymentForm: "exchange-sum" | "exchange-service" | "";
//     desiredPaymentType:
//       | "hand-to-hand"
//       | "before-delivery"
//       | "after-delivery"
//       | "";
//   };
//   deliveryConditions: {
//     pickup: {
//       allowed: "yes" | "no";
//       details: {
//         address: string;
//         country: string;
//         city: string;
//         campus: string;
//       };
//     };
//     delivery: {
//       allowed: "yes" | "no";
//       costOption?: "yes" | "no";
//       details: {
//         amount?: string;
//         country: string;
//         city: string;
//       };
//     };
//   };
//   geolocation: {
//     campus: string;
//     country: string;
//   };
//   otherSpecialConditions: {
//     additionalDescription: string;
//     uploadedFiles: File[];
//   };
// };

// type SubmitExchangeFormProps = {
//   initialValues: SubmitExchangeDetails;
//   validationSchema: object;
//   onSubmit: (values: SubmitExchangeDetails, formikHelpers: any) => void;
//   setFormValues: Dispatch<SetStateAction<SubmitExchangeDetails>>;
// };

// const SubmitExchangeForm: React.FC<SubmitExchangeFormProps> = ({
//   initialValues,
//   validationSchema,
//   onSubmit,
//   setFormValues,
// }) => {
//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = useState<
//     string | null
//   >(null);

//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, actions) => {
//         console.log("Collected Data in Child Component:", values); // Log in child
//         setFormValues(values); // Update parent state
//         onSubmit(values, actions); // Trigger parent onSubmit
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, values, handleSubmit }) => (
//         <Form>
//           {/* Zone 1 Insertion Banner */}
//           <div className="text-center p-5">
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               <Image
//                 src={previewZoneOneBanner || "/imagetoselect.png"}
//                 alt="Upload Banner"
//                 className="max-w-full h-auto mx-auto mb-2"
//                 width={100}
//                 height={100}
//               />
//               <p className="text-gray-600">Click to upload</p>
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;
//                     setFieldValue("zoneOneBanner", file);

//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div>

//           {/* Next Button */}
//           <div className="flex justify-end mt-4">
//             <button
//               type="button"
//               className="bg-blue-500 text-white py-2 px-4 rounded-md"
//               onClick={() => handleSubmit()}
//             >
//               Next
//             </button>
//           </div>
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitExchangeForm;

// type SubmitExchangeDetails = {
//   // Use the same type definition as in the parent
//   zoneOneBanner: File | null;
//   title: string;
//   offerType: string;
//   category: string;
//   subcategory: string;
//   featuredProductStatus: "New" | "GoodCondition" | "Used" | "";
//   additionalDescription: string;
//   images: (File | null)[];
//   startDate: string;
//   endDate: string;
//   materialConditions: {
//     estimatedValue: string;
//     decision: "yes" | "no";
//     depositPayment: { percentage: string };
//     otherContingentCoverageRequired: string;
//   };
//   guarantees: {
//     moneyBackGuarantee: "yes" | "no";
//     satisfactionGuarantee: "yes" | "no";
//   };
//   paymentDetails: {
//     desiredPaymentForm: "exchange-sum" | "exchange-service" | "";
//     desiredPaymentType:
//       | "hand-to-hand"
//       | "before-delivery"
//       | "after-delivery"
//       | "";
//   };
//   deliveryConditions: {
//     pickup: {
//       allowed: "yes" | "no";
//       details: {
//         address: string;
//         country: string;
//         city: string;
//         campus: string;
//       };
//     };
//     delivery: {
//       allowed: "yes" | "no";
//       costOption?: "yes" | "no";
//       details: {
//         amount?: string;
//         country: string;
//         city: string;
//       };
//     };
//   };
//   geolocation: {
//     campus: string;
//     country: string;
//   };
//   otherSpecialConditions: {
//     additionalDescription: string;
//     uploadedFiles: File[];
//   };
// };

// type SubmitExchangeFormProps = {
//   initialValues: SubmitExchangeDetails; // Correctly typed initialValues
//   validationSchema: object;
//   onSubmit: (values: SubmitExchangeDetails, formikHelpers: any) => void;
//   setFormValues: Dispatch<SetStateAction<SubmitExchangeDetails>>;
// };

// const SubmitExchangeForm: React.FC<SubmitExchangeFormProps> = ({
//   initialValues,
//   validationSchema,
//   onSubmit,
//   setFormValues,
// }) => {
//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = useState<
//     string | null
//   >(null);

//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, actions) => {
//         console.log("Collected Data from child (onSubmit):", values);
//         setFormValues(values); // Update parent formValues state
//         onSubmit(values, actions); // Trigger parent onSubmit
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, handleSubmit, isValid, dirty }) => (
//         <Form>
//           {/* Zone 1 Insertion Banner */}
//           {/* <div className="text-center p-5">
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               <Image
//                 src={previewZoneOneBanner || "/imagetoselect.png"}
//                 alt="Upload Banner"
//                 className="max-w-full h-auto mx-auto mb-2"
//                 width={100}
//                 height={100}
//               />
//               <p className="text-gray-600">Click to upload</p>
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;
//                     setFieldValue("zoneOneBanner", file);

//                     // Update preview
//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div> */}

//           {/* Title Field */}
//           <div>
//             <label htmlFor="title" className="block font-semibold">
//               Title of the offer
//             </label>
//             <Field
//               id="title"
//               name="title"
//               placeholder="Enter title"
//               className="w-full p-2 border rounded-md"
//             />
//             <ErrorMessage
//               name="title"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Debugging Info */}
//           <div className="mt-4">
//             <p>Form Valid: {isValid ? "Yes" : "No"}</p>
//             <p>Form Dirty: {dirty ? "Yes" : "No"}</p>
//           </div>

//           {/* Next Button */}
//           <div className="flex justify-end mt-4">
//             <button
//               type="submit"
//               className="bg-blue-500 text-white py-2 px-4 rounded-md"
//             >
//               Next
//             </button>
//           </div>
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitExchangeForm;

// const SubmitExchangeForm: React.FC<SubmitExchangeFormProps> = ({
//   initialValues,
//   validationSchema,
//   onSubmit,
//   setFormValues,
// }) => {
//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = useState<
//     string | null
//   >(null);

//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, actions) => {
//         console.log("Collected Data from child:", values);
//         onSubmit(values, actions);
//         setFormValues(values); // Update parent formValues state
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, values, handleSubmit }) => (
//         <Form>
//           {/* Zone 1 Insertion Banner */}
//           <div className="text-center p-5">
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               <Image
//                 src={previewZoneOneBanner || "/imagetoselect.png"}
//                 alt="Upload Banner"
//                 className="max-w-full h-auto mx-auto mb-2"
//                 width={100}
//                 height={100}
//               />
//               <p className="text-gray-600">Click to upload</p>
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;
//                     setFieldValue("zoneOneBanner", file);

//                     // Update preview
//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div>

//           {/* Next Button */}
//           <div className="flex justify-end mt-4">
//             <button
//               type="submit"
//               className="bg-blue-500 text-white py-2 px-4 rounded-md"
//               // onClick={() => {
//               //   handleSubmit();
//               // }}
//             >
//               Next
//             </button>
//           </div>

//           {/* Add other form fields here */}
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitExchangeForm;

// import React, { useState } from "react";
// import {
//   Formik,
//   Form,
//   Field,
//   ErrorMessage,
//   FieldProps,
//   FieldInputProps,
//   FormikProps,
// } from "formik";
// import * as Yup from "yup";
// import Image from "next/image";

// type Geolocation = {
//   campus: string;
//   country: string;
// };

// type Guarantees = {
//   moneyBackGuarantee: "yes" | "no";
//   satisfactionGuarantee: "yes" | "no";
// };

// type DeliveryConditions = {
//   pickup: {
//     allowed: "yes" | "no";
//     details: {
//       address: string;
//       country: string;
//       city: string;
//       campus: string;
//     };
//   };

//   delivery: {
//     allowed: "yes" | "no";
//     costOption?: "yes" | "no"; // Determines whether delivery cost applies
//     details: {
//       amount?: string; // Amount is only required if costOption is "yes"
//       country: string;
//       city: string;
//     };
//   };
// };

// type OtherSpecialConditions = {
//   additionalDescription: string;
//   uploadedFiles: File[]; // Array of uploaded files
// };

// type PaymentDetails = {
//   desiredPaymentForm: "exchange-sum" | "exchange-service" | "";
//   desiredPaymentType:
//     | "hand-to-hand"
//     | "before-delivery"
//     | "after-delivery"
//     | "";
// };

// // Initial Form Values
// type SubmitExchangeDetails = {
//   zoneOneBanner: File | null;
//   title: string;
//   offerType: string;
//   category: string;
//   subcategory: string;
//   featuredProductStatus: "New" | "GoodCondition" | "Used" | "";
//   additionalDescription: string;
//   images: (File | null)[];
//   startDate: string; // Format: YYYY-MM-DD
//   endDate: string; // Format: YYYY-MM-DD
//   materialConditions: {
//     estimatedValue: string;
//     decision: "yes" | "no";
//     depositPayment: { percentage: string };
//     otherContingentCoverageRequired: string; // New field added here
//   };
//   guarantees: Guarantees;
//   // paymentDetails: {
//   //   desiredPaymentForm: "exchange-sum" | "exchange-service" | "";
//   //   desiredPaymentType:
//   //     | "hand-to-hand"
//   //     | "before-delivery"
//   //     | "after-delivery"
//   //     | "";
//   // };
//   paymentDetails: PaymentDetails;
//   deliveryConditions: DeliveryConditions;
//   geolocation: Geolocation;
//   otherSpecialConditions: OtherSpecialConditions;
// };

// const initialValues: SubmitExchangeDetails = {
//   zoneOneBanner: null,
//   title: "",
//   offerType: "",
//   category: "",
//   subcategory: "",
//   featuredProductStatus: "",
//   additionalDescription: "",
//   images: [null, null, null],
//   startDate: "",
//   endDate: "",
//   materialConditions: {
//     estimatedValue: "",
//     decision: "no", // Default to "no"
//     depositPayment: {
//       percentage: "", // Empty percentage by default
//     },
//     otherContingentCoverageRequired: "", // New field added here
//   },
//   guarantees: {
//     moneyBackGuarantee: "no", // Default value
//     satisfactionGuarantee: "no", // Default value
//   },
//   // paymentDetails: {
//   //   desiredPaymentForm: "",
//   //   desiredPaymentType: "",
//   // },
//   paymentDetails: {
//     desiredPaymentForm: "",
//     desiredPaymentType: "",
//   },
//   deliveryConditions: {
//     pickup: {
//       allowed: "no", // Default value
//       details: {
//         address: "",
//         country: "",
//         city: "",
//         campus: "",
//       },
//     },
//     delivery: {
//       allowed: "no", // Default to "no"
//       costOption: "no", // Default to "no" for cost
//       details: {
//         amount: "", // Empty initially
//         country: "",
//         city: "",
//       },
//     },
//   },
//   geolocation: {
//     campus: "",
//     country: "",
//   },
//   otherSpecialConditions: {
//     additionalDescription: "",
//     uploadedFiles: [],
//   },
// };

// // Validation Schema
// const validationSchema = Yup.object({
//   zoneOneBanner: Yup.mixed()
//     .required("Zone One Banner is required")
//     .test(
//       "fileFormat",
//       "Only image files are allowed",
//       (value) =>
//         !value || (value instanceof File && value.type.startsWith("image/"))
//     ),
//   title: Yup.string().required("Title is required"),
//   offerType: Yup.string().required("Offer type is required"),
//   category: Yup.string()
//     .required("Category is required")
//     .oneOf(["Electronics", "Health"], "Invalid category selected"),

//   subcategory: Yup.string()
//     .required("SubCategory is required")
//     .oneOf(["Accessories", "Health"], "Invalid subcategory selected"),
//   featuredProductStatus: Yup.string()
//     .oneOf(["New", "GoodCondition", "Used"], "Invalid status selected")
//     .required("Featured Product Status is required"),
//   additionalDescription: Yup.string(),
//   images: Yup.array()
//     .of(
//       Yup.mixed<File>()
//         .nullable()
//         .test(
//           "is-valid-file",
//           "Each item must be a valid file or null",
//           (value) => value === null || value instanceof File
//         )
//     )
//     .min(1, "At least one image is required")
//     .max(3, "No more than 3 images are allowed")
//     .required("At least one image is required"),
//   startDate: Yup.date()
//     .required("Start Date is required")
//     .typeError("Invalid date format"),
//   endDate: Yup.date()
//     .required("End Date is required")
//     .min(Yup.ref("startDate"), "End Date cannot be before Start Date")
//     .typeError("Invalid date format"),
//   materialConditions: Yup.object({
//     otherContingentCoverageRequired: Yup.string()
//       .required("Other Contingent Coverage is required")
//       .max(255, "Must be 255 characters or less"),
//     estimatedValue: Yup.number()
//       .required("Estimated value is required")
//       .min(0, "Value cannot be negative"),
//     decision: Yup.string()
//       .oneOf(["yes", "no"], "Invalid decision")
//       .required("Decision is required"),
//     depositPayment: Yup.object({
//       percentage: Yup.number().when("decision", {
//         is: (decision: string | undefined) =>
//           typeof decision === "string" && decision === "yes",
//         then: (schema) =>
//           schema
//             .min(0, "Percentage cannot be less than 0")
//             .max(100, "Percentage cannot exceed 100")
//             .required("Deposit percentage is required"),
//         otherwise: (schema) => schema.notRequired(),
//       }),
//     }),
//   }),
//   paymentDetails: Yup.object({
//     desiredPaymentForm: Yup.string()
//       .oneOf(
//         ["exchange-sum", "exchange-service"],
//         "Invalid Desired Payment Form"
//       )
//       .required("Desired Payment Form is required"),
//     desiredPaymentType: Yup.string()
//       .oneOf(
//         ["hand-to-hand", "before-delivery", "after-delivery"],
//         "Invalid Desired Payment Type"
//       )
//       .required("Desired Payment Type is required"),
//   }),
//   guarantees: Yup.object({
//     moneyBackGuarantee: Yup.string()
//       .oneOf(["yes", "no"], "Invalid choice")
//       .required("Money Back Guarantee is required"),
//     satisfactionGuarantee: Yup.string()
//       .oneOf(["yes", "no"], "Invalid choice")
//       .required("Satisfaction Guarantee is required"),
//   }),
//   deliveryConditions: Yup.object({
//     pickup: Yup.object({
//       allowed: Yup.string()
//         .oneOf(["yes", "no"], "Invalid option")
//         .required("Pickup allowed is required"),
//       details: Yup.object().when("allowed", (allowed: unknown) => {
//         if (allowed === "yes") {
//           return Yup.object({
//             address: Yup.string().required("Address is required"),
//             country: Yup.string().required("Country is required"),
//             city: Yup.string().required("City is required"),
//             campus: Yup.string().required("Campus is required"),
//           });
//         }
//         return Yup.object().nullable(); //Allow null if not "yes"
//       }),
//     }),
//   }),
//   geolocation: Yup.object({
//     campus: Yup.string().required("Campus is required"),
//     country: Yup.string().required("Country is required"),
//   }),
//   otherSpecialConditions: Yup.object({
//     additionalDescription: Yup.string()
//       .required("Additional description is required")
//       .max(500, "Description can't exceed 500 characters"),
//     uploadedFiles: Yup.array()
//       .of(
//         Yup.mixed()
//           .nullable()
//           .test(
//             "fileFormat",
//             "Invalid file type. Only jpeg, jpg, png, pdf, doc, docx allowed.",
//             (value) => {
//               if (!value) return true; // Allow null values
//               return (
//                 value instanceof File &&
//                 [
//                   "image/jpeg",
//                   "image/jpg",
//                   "image/png",
//                   "application/pdf",
//                 ].includes(value.type)
//               );
//             }
//           )
//       )
//       .max(1, "You can only upload 1 file"),
//   }),
// });

// const SubmitExchangeForm = () => {
//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = useState<
//     string | null
//   >(null);

//   const [previewImages, setPreviewImages] = useState<(string | null)[]>([
//     null,
//     null,
//     null,
//   ]);

//   return (
//     <Formik
//       initialValues={initialValues}
//       validationSchema={validationSchema}
//       onSubmit={(values, { resetForm }) => {
//         console.log("Formik Submitted Values:", values);
//         resetForm(); // Clear the form after submission
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, values, errors, touched, isValid, dirty }) => (
//       )}
//     </Formik>
//   );
// };

//         <Form className="space-y-6 p-4 md:p-8 bg-white shadow-xl rounded-lg max-w-4xl mx-auto border border-gray-200">
//           {/* Title of the Submit Exchange*/}
//           <div className="text-center">
//             <h2 className="text-xl md:text-2xl font-bold text-blue-700 mb-4">
//               Submit An Exchange Offer
//             </h2>
//             <p className="text-gray-600">
//               Finance Your Projects Or Expenses With Your Unused Services Or
//               Goods!
//             </p>
//           </div>
//           {/* Zone 1 Insertion Banner */}
//           <div className="text-center p-5">
//             <h2 className="mb-5 text-lg font-bold">
//               Zone 1 Insertion Banner Advertising
//             </h2>
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               <Image
//                 src={previewZoneOneBanner || "/imagetoselect.png"}
//                 alt="Upload Banner"
//                 className="max-w-full h-auto mx-auto mb-2"
//                 width={100}
//                 height={100}
//               />
//               <p className="text-gray-600">Click to upload</p>
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   name={field.name}
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;

//                     // Update Formik state
//                     setFieldValue("zoneOneBanner", file);

//                     // Update preview
//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div>
//           {/* Title Field */}
//           <div>
//             <label htmlFor="title" className="block font-semibold">
//               Title of the offer
//             </label>
//             <Field
//               id="title"
//               name="title"
//               placeholder="Enter title"
//               className="w-full p-2 border rounded-md"
//             />
//             <ErrorMessage
//               name="title"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>
//           {/* Offer Type Field */}
//           <div>
//             <label className="block font-semibold mb-2">
//               What do you offer
//             </label>
//             <div role="group" aria-labelledby="offerType">
//               {/* Radio Button for "Good" */}
//               <label className="inline-flex items-center mr-4">
//                 <Field
//                   type="radio"
//                   name="offerType"
//                   value="Good"
//                   className="form-radio h-4 w-4 text-blue-600"
//                 />
//                 <span className="ml-2">Good</span>
//               </label>

//               {/* Radio Button for "Service" */}
//               <label className="inline-flex items-center">
//                 <Field
//                   type="radio"
//                   name="offerType"
//                   value="Service"
//                   className="form-radio h-4 w-4 text-blue-600"
//                 />
//                 <span className="ml-2">Service</span>
//               </label>
//             </div>

//             {/* Validation Error Message */}
//             <ErrorMessage
//               name="offerType"
//               component="div"
//               className="text-red-500 text-sm mt-1"
//             />
//           </div>
//           {/* Category and SubCategory Fields */}
//           <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
//             {/* Category */}
//             <div>
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Category
//               </label>
//               <Field
//                 as="select"
//                 name="category"
//                 className="w-full p-2 border rounded-md"
//                 value={values.category}
//                 onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                   const selectedValue = event.target.value;
//                   setFieldValue("category", selectedValue);
//                 }}
//               >
//                 <option value="" disabled>
//                   Select Category
//                 </option>
//                 <option value="Electronics">Electronics</option>
//                 <option value="Health">Health</option>
//               </Field>
//               <ErrorMessage
//                 name="category"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* SubCategory */}
//             <div>
//               <label className="block text-gray-700 font-semibold mb-1">
//                 SubCategory
//               </label>
//               <Field
//                 as="select"
//                 name="subcategory"
//                 className="w-full p-2 border rounded-md"
//                 value={values.subcategory}
//                 onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                   const selectedValue = event.target.value;
//                   setFieldValue("subcategory", selectedValue);
//                 }}
//               >
//                 <option value="" disabled>
//                   Select SubCategory
//                 </option>
//                 <option value="Accessories">Accessories</option>
//                 <option value="Health">Health</option>
//               </Field>
//               <ErrorMessage
//                 name="subcategory"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>
//           {/* Featured Product Status */}
//           <div>
//             <label className="block text-gray-700 font-semibold mb-1">
//               Featured Product Status
//             </label>
//             <Field name="featuredProductStatus">
//               {({ field }: FieldProps) => (
//                 <select
//                   {...field}
//                   className="w-full p-2 border rounded-md"
//                   onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                     const selectedValue = event.target.value;
//                     setFieldValue("featuredProductStatus", selectedValue);
//                   }}
//                 >
//                   <option value="" disabled>
//                     Select Status
//                   </option>
//                   <option value="New">New</option>
//                   <option value="GoodCondition">Good Condition</option>
//                   <option value="Used">Used</option>
//                 </select>
//               )}
//             </Field>
//             <ErrorMessage
//               name="featuredProductStatus"
//               component="div"
//               className="text-red-500 text-sm mt-1"
//             />
//           </div>
//           {/* Additional Description Field */}
//           <div>
//             <label
//               htmlFor="additionalDescription"
//               className="block font-semibold"
//             >
//               Additional Description
//             </label>
//             <Field
//               as="textarea"
//               id="additionalDescription"
//               name="additionalDescription"
//               placeholder="Add any additional details..."
//               className="w-full p-2 border rounded-md"
//               rows={4}
//             />
//             <ErrorMessage
//               name="additionalDescription"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>
//           {/* Images to Select */}
//           <div className="mt-4">
//             <label
//               htmlFor="offer-images"
//               className="block text-sm font-semibold text-gray-700 mb-2"
//             >
//               Upload Any Images Of The Offer
//             </label>
//             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
//               {Array.from({ length: 3 }).map((_, index) => (
//                 <div
//                   key={index}
//                   className="flex flex-col items-center space-y-2"
//                 >
//                   <label
//                     htmlFor={`offer-image-${index}`}
//                     className="cursor-pointer flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-md hover:border-blue-400 hover:bg-gray-50"
//                   >
//                     <Image
//                       src={previewImages[index] || "/imagetoselect.png"}
//                       alt="Select Image"
//                       className="object-cover w-20 h-20 rounded-md"
//                       width={100}
//                       height={100}
//                     />
//                     <span className="text-sm text-gray-500">Select Image</span>
//                   </label>
//                   <Field name={`images[${index}]`}>
//                     {({
//                       form,
//                     }: {
//                       form: FormikProps<SubmitExchangeDetails>;
//                     }) => (
//                       <input
//                         type="file"
//                         id={`offer-image-${index}`}
//                         accept="image/*"
//                         className="hidden"
//                         onChange={(event) => {
//                           const file = event.target.files?.[0] || undefined;

//                           // Update Formik state
//                           form.setFieldValue(`images[${index}]`, file);

//                           // Update preview
//                           if (file) {
//                             const reader = new FileReader();
//                             reader.onload = () => {
//                               setPreviewImages((prev) => {
//                                 const updatedPreviews = [...prev];
//                                 updatedPreviews[index] =
//                                   reader.result as string;
//                                 return updatedPreviews;
//                               });
//                             };
//                             reader.readAsDataURL(file);
//                           } else {
//                             setPreviewImages((prev) => {
//                               const updatedPreviews = [...prev];
//                               updatedPreviews[index] = null;
//                               return updatedPreviews;
//                             });
//                           }
//                         }}
//                       />
//                     )}
//                   </Field>
//                 </div>
//               ))}
//             </div>
//             <ErrorMessage
//               name="images"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div>
//           {/* Offer Dates */}
//           <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
//             {/* Start Date */}
//             <div>
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Offer Start Date
//               </label>
//               <Field name="startDate">
//                 {({ field }: FieldProps) => (
//                   <input
//                     {...field}
//                     type="date"
//                     className="w-full p-2 border rounded-md"
//                   />
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="startDate"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* End Date */}
//             <div>
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Offer End Date
//               </label>
//               <Field name="endDate">
//                 {({ field }: FieldProps) => (
//                   <input
//                     {...field}
//                     type="date"
//                     className="w-full p-2 border rounded-md"
//                   />
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="endDate"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>
//           {/* material conditions */}
//           <div>
//             <h3 className="text-lg font-bold text-center">
//               Material conditions of the exchange
//             </h3>

//             {/* Estimated Value */}
//             <div>
//               <label className="font-semibold text-gray-700">
//                 Estimated value of the exchange
//               </label>
//               <Field name="materialConditions.estimatedValue">
//                 {({ field }: FieldProps) => (
//                   <input
//                     {...field}
//                     type="number"
//                     className="w-full p-2 border rounded-md"
//                     placeholder="Enter value"
//                   />
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="materialConditions.estimatedValue"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* Decision: Radio Buttons */}
//             <div>
//               <label className="block text-gray-700 mb-1">
//                 Deposit Payment for Booking
//               </label>
//               <div role="group" className="flex gap-4">
//                 <label>
//                   <Field
//                     type="radio"
//                     name="materialConditions.decision"
//                     value="yes"
//                   />{" "}
//                   Yes
//                 </label>
//                 <label>
//                   <Field
//                     type="radio"
//                     name="materialConditions.decision"
//                     value="no"
//                   />{" "}
//                   No
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="materialConditions.decision"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* Deposit Percentage (Conditional Field) */}
//             {values.materialConditions.decision === "yes" && (
//               <div>
//                 <label className="block text-gray-700 mb-1">
//                   Deposit Percentage (%)
//                 </label>
//                 <Field name="materialConditions.depositPayment.percentage">
//                   {({ field }: FieldProps) => (
//                     <input
//                       {...field}
//                       type="number"
//                       min={0}
//                       max={100}
//                       className="w-full p-2 border rounded-md"
//                       placeholder="Enter percentage"
//                     />
//                   )}
//                 </Field>
//                 <ErrorMessage
//                   name="materialConditions.depositPayment.percentage"
//                   component="div"
//                   className="text-red-500 text-sm"
//                 />
//               </div>
//             )}
//           </div>
//           {/* Other Contingent Coverage Required */}
//           <div className="font-semibold mt-4">
//             <label htmlFor="materialConditions.otherContingentCoverageRequired">
//               Other Contingent Coverage Required
//             </label>
//             <Field name="materialConditions.otherContingentCoverageRequired">
//               {({ field }: FieldProps) => (
//                 <input
//                   {...field}
//                   type="text"
//                   className="w-full p-2 border rounded-md"
//                   placeholder="Specify other contingent coverage"
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="materialConditions.otherContingentCoverageRequired"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>
//           {/* Guarantees */}
//           <div>
//             <div className="mt-4">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Money Back Guarantee
//               </label>
//               <div role="group" className="flex gap-4">
//                 <label>
//                   <Field
//                     type="radio"
//                     name="guarantees.moneyBackGuarantee"
//                     value="yes"
//                   />
//                   Yes
//                 </label>
//                 <label>
//                   <Field
//                     type="radio"
//                     name="guarantees.moneyBackGuarantee"
//                     value="no"
//                   />
//                   No
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="guarantees.moneyBackGuarantee"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             <div className="mt-4">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Satisfaction Guarantee
//               </label>
//               <div role="group" className="flex gap-4">
//                 <label>
//                   <Field
//                     type="radio"
//                     name="guarantees.satisfactionGuarantee"
//                     value="yes"
//                   />
//                   Yes
//                 </label>
//                 <label>
//                   <Field
//                     type="radio"
//                     name="guarantees.satisfactionGuarantee"
//                     value="no"
//                   />
//                   No
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="guarantees.satisfactionGuarantee"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>
//           {/* Payment Details */}
//           {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
//             {/* Desired Payment Form
//             <div className="w-full">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Desired Payment Form
//               </label>
//               <Field name="paymentDetails.desiredPaymentForm">
//                 {({ field }: FieldProps) => (
//                   <select
//                     {...field}
//                     className="w-full p-2 border rounded-md focus:outline-blue-500"
//                   >
//                     <option value="" disabled>
//                       Select Payment Form
//                     </option>
//                     <option value="exchange-sum">
//                       Exchange + or - Additional Sum
//                     </option>
//                     <option value="exchange-service">
//                       Exchange + or - Benefit or Service
//                     </option>
//                   </select>
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="paymentDetails.desiredPaymentForm"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* Desired Payment Type
//             <div className="w-full">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Desired Payment Type
//               </label>
//               <Field name="paymentDetails.desiredPaymentType">
//                 {({ field }: FieldProps) => (
//                   <select
//                     {...field}
//                     className="w-full p-2 border rounded-md focus:outline-blue-500"
//                   >
//                     <option value="" disabled>
//                       Select Payment Type
//                     </option>
//                     <option value="hand-to-hand">Hand to Hand</option>
//                     <option value="before-delivery">
//                       Exchange & Payment Before Delivery
//                     </option>
//                     <option value="after-delivery">
//                       Exchange & Payment After Delivery
//                     </option>
//                   </select>
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="paymentDetails.desiredPaymentType"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div> */}
//           {/* Payment Details */}
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
//             {/* Desired Payment Form */}
//             <div className="w-full">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Desired Payment Form
//               </label>
//               <Field name="paymentDetails.desiredPaymentForm">
//                 {({ field }: FieldProps) => (
//                   <select
//                     {...field}
//                     className="w-full p-2 border rounded-md focus:outline-blue-500"
//                   >
//                     <option value="" disabled>
//                       Select Payment Form
//                     </option>
//                     <option value="exchange-sum">
//                       Exchange + or - Additional Sum
//                     </option>
//                     <option value="exchange-service">
//                       Exchange + or - Benefit or Service
//                     </option>
//                   </select>
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="paymentDetails.desiredPaymentForm"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* Desired Payment Type */}
//             <div className="w-full">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Desired Payment Type
//               </label>
//               <Field name="paymentDetails.desiredPaymentType">
//                 {({ field }: FieldProps) => (
//                   <select
//                     {...field}
//                     className="w-full p-2 border rounded-md focus:outline-blue-500"
//                   >
//                     <option value="" disabled>
//                       Select Payment Type
//                     </option>
//                     <option value="hand-to-hand">Hand to Hand</option>
//                     <option value="before-delivery">
//                       Exchange & Payment Before Delivery
//                     </option>
//                     <option value="after-delivery">
//                       Exchange & Payment After Delivery
//                     </option>
//                   </select>
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="paymentDetails.desiredPaymentType"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>

//           <div className="mt-6">
//             <h2 className="text-xl font-bold text-center mb-4">
//               Delivery Conditions
//             </h2>

//             {/* Pickup */}
//             <div className="mt-4">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 Pickup
//               </label>
//               <div className="flex gap-4">
//                 <label className="flex items-center">
//                   <Field
//                     type="radio"
//                     name="deliveryConditions.pickup.allowed"
//                     value="yes"
//                   />
//                   <span className="ml-2">Yes</span>
//                 </label>
//                 <label className="flex items-center">
//                   <Field
//                     type="radio"
//                     name="deliveryConditions.pickup.allowed"
//                     value="no"
//                   />
//                   <span className="ml-2">No</span>
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="deliveryConditions.pickup.allowed"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />

//               {/* Conditional Fields for Pickup Details */}
//               {values.deliveryConditions.pickup.allowed === "yes" && (
//                 <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
//                   {(["address", "country", "city", "campus"] as const).map(
//                     (key) => (
//                       <div key={key}>
//                         <label
//                           htmlFor={`deliveryConditions.pickup.details.${key}`}
//                           className="block text-gray-700 font-semibold mb-1"
//                         >
//                           {key.charAt(0).toUpperCase() + key.slice(1)}{" "}
//                           {/* Capitalize label */}
//                         </label>
//                         <Field
//                           name={`deliveryConditions.pickup.details.${key}`}
//                           className="w-full p-2 border rounded-md"
//                           placeholder={`Enter ${key}`}
//                         />
//                         <ErrorMessage
//                           name={`deliveryConditions.pickup.details.${key}`}
//                           component="div"
//                           className="text-red-500 text-sm"
//                         />
//                       </div>
//                     )
//                   )}
//                 </div>
//               )}
//             </div>
//           </div>
//           {/* Delivery */}
//           <div className="mt-4">
//             <label className="block text-gray-700 font-semibold mb-1">
//               Delivery
//             </label>
//             <div className="flex gap-4">
//               <label className="flex items-center">
//                 <Field
//                   type="radio"
//                   name="deliveryConditions.delivery.allowed"
//                   value="yes"
//                 />
//                 <span className="ml-2">Yes</span>
//               </label>
//               <label className="flex items-center">
//                 <Field
//                   type="radio"
//                   name="deliveryConditions.delivery.allowed"
//                   value="no"
//                 />
//                 <span className="ml-2">No</span>
//               </label>
//             </div>
//             <ErrorMessage
//               name="deliveryConditions.delivery.allowed"
//               component="div"
//               className="text-red-500 text-sm"
//             />

//             {values.deliveryConditions.delivery.allowed === "yes" && (
//               <>
//                 {/* Delivery Cost Option */}
//                 <div className="mt-4">
//                   <label className="block text-gray-700 font-semibold mb-1">
//                     Is there a delivery cost?
//                   </label>
//                   <div className="flex gap-4">
//                     <label className="flex items-center">
//                       <Field
//                         type="radio"
//                         name="deliveryConditions.delivery.costOption"
//                         value="yes"
//                       />
//                       <span className="ml-2">Yes</span>
//                     </label>
//                     <label className="flex items-center">
//                       <Field
//                         type="radio"
//                         name="deliveryConditions.delivery.costOption"
//                         value="no"
//                       />
//                       <span className="ml-2">No</span>
//                     </label>
//                   </div>
//                   <ErrorMessage
//                     name="deliveryConditions.delivery.costOption"
//                     component="div"
//                     className="text-red-500 text-sm"
//                   />
//                 </div>

//                 {/* Delivery Amount */}
//                 {values.deliveryConditions.delivery.costOption === "yes" && (
//                   <div className="mt-4">
//                     <label className="block text-gray-700 font-semibold mb-1">
//                       Delivery Cost Amount
//                     </label>
//                     <Field
//                       name="deliveryConditions.delivery.details.amount"
//                       placeholder="Enter delivery cost amount"
//                       className="w-full p-2 border rounded-md"
//                     />
//                     <ErrorMessage
//                       name="deliveryConditions.delivery.details.amount"
//                       component="div"
//                       className="text-red-500 text-sm"
//                     />
//                   </div>
//                 )}

//                 {/* Delivery Regions */}
//                 <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
//                   <div>
//                     <label className="block text-gray-700 mb-1">Country</label>
//                     <Field
//                       name="deliveryConditions.delivery.details.country"
//                       placeholder="Enter country"
//                       className="w-full p-2 border rounded-md"
//                     />
//                     <ErrorMessage
//                       name="deliveryConditions.delivery.details.country"
//                       component="div"
//                       className="text-red-500 text-sm"
//                     />
//                   </div>
//                   <div>
//                     <label className="block text-gray-700 mb-1">City</label>
//                     <Field
//                       name="deliveryConditions.delivery.details.city"
//                       placeholder="Enter city"
//                       className="w-full p-2 border rounded-md"
//                     />
//                     <ErrorMessage
//                       name="deliveryConditions.delivery.details.city"
//                       component="div"
//                       className="text-red-500 text-sm"
//                     />
//                   </div>
//                 </div>
//               </>
//             )}
//           </div>
//           {/* Geolocation */}
//           <div className="mt-4">
//             <h2 className="text-xl font-bold text-center mb-4">Geolocation</h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//               {(["campus", "country"] as const).map((key) => (
//                 <div key={key} className="mt-4">
//                   {/* Label */}
//                   <label
//                     htmlFor={`geolocation.${key}`}
//                     className="block text-gray-700 font-semibold mb-1"
//                   >
//                     {key.charAt(0).toUpperCase() + key.slice(1)}
//                   </label>
//                   {/* Input Field */}
//                   <Field name={`geolocation.${key}`}>
//                     {({ field }: { field: FieldInputProps<string> }) => (
//                       <input
//                         {...field}
//                         id={`geolocation.${key}`}
//                         type="text"
//                         className="w-full p-2 border rounded-md"
//                         placeholder={`Enter ${key}`}
//                       />
//                     )}
//                   </Field>
//                   {/* Error Message */}
//                   <ErrorMessage
//                     name={`geolocation.${key}`}
//                     component="div"
//                     className="text-red-500 text-sm"
//                   />
//                 </div>
//               ))}
//             </div>
//           </div>
//           {/* Other Special Conditions */}
//           <div className="mt-4">
//             <h2 className="text-xl font-bold text-center mb-4">
//               Other Special Conditions
//             </h2>

//             {/* Additional Description */}
//             <div>
//               <label
//                 htmlFor="otherSpecialConditions.additionalDescription"
//                 className="block text-gray-700 font-semibold mb-1"
//               >
//                 Additional Description of the payment or Delivery Method
//               </label>
//               <Field name="otherSpecialConditions.additionalDescription">
//                 {({ field }: { field: FieldInputProps<string> }) => (
//                   <textarea
//                     {...field}
//                     id="otherSpecialConditions.additionalDescription"
//                     rows={4}
//                     className="w-full p-3 border rounded-md resize-none"
//                     placeholder="Enter additional description..."
//                   />
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="otherSpecialConditions.additionalDescription"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>

//             {/* File Upload */}
//             <div className="mt-4">
//               <label
//                 htmlFor="fileUpload"
//                 className="block text-gray-700 font-semibold mb-1"
//               >
//                 Upload File
//               </label>
//               <div className="flex items-center space-x-4">
//                 <label
//                   htmlFor="fileUpload"
//                   className="flex items-center justify-center w-full p-4 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-100"
//                 >
//                   <span className="text-gray-600 text-sm">
//                     {values.otherSpecialConditions.uploadedFiles.length > 0
//                       ? values.otherSpecialConditions.uploadedFiles[0].name
//                       : "Choose a file"}
//                   </span>
//                 </label>
//                 <Field name="otherSpecialConditions.uploadedFiles">
//                   {({
//                     form,
//                   }: {
//                     form: FormikProps<OtherSpecialConditions>;
//                   }) => (
//                     <input
//                       id="fileUpload"
//                       type="file"
//                       className="hidden"
//                       accept=".jpeg, .jpg, .png, .pdf, .doc, .docx"
//                       onChange={(
//                         event: React.ChangeEvent<HTMLInputElement>
//                       ) => {
//                         const file = event.target.files?.[0];
//                         if (file) {
//                           // Update Formik field value
//                           form.setFieldValue(
//                             "otherSpecialConditions.uploadedFiles",
//                             [file]
//                           );
//                         }
//                       }}
//                     />
//                   )}
//                 </Field>
//               </div>
//               <ErrorMessage
//                 name="otherSpecialConditions.uploadedFiles"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>
//           {/* Debugging Section */}
//           <pre>{JSON.stringify(errors, null, 2)}</pre>
//           <p>Form is {isValid ? "valid" : "invalid"}</p>
//           {/* Submit Button */}
//           <button
//             // type="submit"

//             className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md"
//           >
//             Next
//           </button>
//         </Form>
// export default SubmitExchangeForm;






// <Form className="m-5 space-y-6 p-4 md:p-8 bg-white shadow-xl rounded-lg max-w-4xl mx-auto border border-gray-200">
        //   {/* Title of the Submit Exchange*/}
        //   <div className="text-center">
        //     <h2 className="text-xl md:text-2xl font-bold text-blue-700 mb-4">
        //       Submit An Exchange Offer
        //     </h2>
        //     <p className="text-gray-600">
        //       Finance Your Projects Or Expenses With Your Unused Services Or
        //       Goods!
        //     </p>
        //   </div>
        //   {/* Zone 1 Insertion Banner */}
        //   <div className="text-center p-5">
        //     <h2 className="mb-5 text-lg font-bold">
        //       Zone 1 Insertion Banner Advertising
        //     </h2>
        //     <label
        //       htmlFor="zoneOneBanner"
        //       className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
        //     >
        //       <Image
        //         src={previewZoneOneBanner || "/imagetoselect.png"}
        //         alt="Upload Banner"
        //         className="max-w-full h-auto mx-auto mb-2"
        //         width={100}
        //         height={100}
        //       />
        //       <p className="text-gray-600">Click to upload</p>
        //     </label>
        //     <Field name="zoneOneBanner">
        //       {({ field }: FieldProps) => (
        //         <input
        //           id="zoneOneBanner"
        //           type="file"
        //           name={field.name}
        //           accept="image/*"
        //           className="hidden"
        //           onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
        //             const file = event.target.files?.[0] || null;

        //             // Update Formik state
        //             setFieldValue("zoneOneBanner", file);

        //             // Update preview
        //             if (file) {
        //               const reader = new FileReader();
        //               reader.onload = () =>
        //                 setPreviewZoneOneBanner(reader.result as string);
        //               reader.readAsDataURL(file);
        //             } else {
        //               setPreviewZoneOneBanner(null);
        //             }
        //           }}
        //         />
        //       )}
        //     </Field>
        //     <ErrorMessage
        //       name="zoneOneBanner"
        //       component="div"
        //       className="text-red-500 text-sm mt-2"
        //     />
        //   </div>
        //   {/* Title Field */}
        //   <div>
        //     <label htmlFor="title" className="block font-semibold">
        //       Title of the offer
        //     </label>
        //     <Field
        //       id="title"
        //       name="title"
        //       placeholder="Enter title"
        //       className="w-full p-2 border rounded-md"
        //     />
        //     <ErrorMessage
        //       name="title"
        //       component="div"
        //       className="text-red-500 text-sm"
        //     />
        //   </div>
        //   {/* Offer Type Field */}
        //   <div>
        //     <label className="block font-semibold mb-2">
        //       What do you offer
        //     </label>
        //     <div role="group" aria-labelledby="offerType">
        //       {/* Radio Button for "Good" */}
        //       <label className="inline-flex items-center mr-4">
        //         <Field
        //           type="radio"
        //           name="offerType"
        //           value="Good"
        //           className="form-radio h-4 w-4 text-blue-600"
        //         />
        //         <span className="ml-2">Good</span>
        //       </label>

        //       {/* Radio Button for "Service" */}
        //       <label className="inline-flex items-center">
        //         <Field
        //           type="radio"
        //           name="offerType"
        //           value="Service"
        //           className="form-radio h-4 w-4 text-blue-600"
        //         />
        //         <span className="ml-2">Service</span>
        //       </label>
        //     </div>

        //     {/* Validation Error Message */}
        //     <ErrorMessage
        //       name="offerType"
        //       component="div"
        //       className="text-red-500 text-sm mt-1"
        //     />
        //   </div>
        //   {/* Category and SubCategory Fields */}
        //   <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        //     {/* Category */}
        //     <div>
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Category
        //       </label>
        //       <Field
        //         as="select"
        //         name="category"
        //         className="w-full p-2 border rounded-md"
        //         value={values.category}
        //         onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
        //           const selectedValue = event.target.value;
        //           setFieldValue("category", selectedValue);
        //         }}
        //       >
        //         <option value="" disabled>
        //           Select Category
        //         </option>
        //         <option value="Electronics">Electronics</option>
        //         <option value="Health">Health</option>
        //       </Field>
        //       <ErrorMessage
        //         name="category"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* SubCategory */}
        //     <div>
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         SubCategory
        //       </label>
        //       <Field
        //         as="select"
        //         name="subcategory"
        //         className="w-full p-2 border rounded-md"
        //         value={values.subcategory}
        //         onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
        //           const selectedValue = event.target.value;
        //           setFieldValue("subcategory", selectedValue);
        //         }}
        //       >
        //         <option value="" disabled>
        //           Select SubCategory
        //         </option>
        //         <option value="Accessories">Accessories</option>
        //         <option value="Health">Health</option>
        //       </Field>
        //       <ErrorMessage
        //         name="subcategory"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>
        //   </div>
        //   {/* Featured Product Status */}
        //   <div>
        //     <label className="block text-gray-700 font-semibold mb-1">
        //       Featured Product Status
        //     </label>
        //     <Field name="featuredProductStatus">
        //       {({ field }: FieldProps) => (
        //         <select
        //           {...field}
        //           className="w-full p-2 border rounded-md"
        //           onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
        //             const selectedValue = event.target.value;
        //             setFieldValue("featuredProductStatus", selectedValue);
        //           }}
        //         >
        //           <option value="" disabled>
        //             Select Status
        //           </option>
        //           <option value="New">New</option>
        //           <option value="GoodCondition">Good Condition</option>
        //           <option value="Used">Used</option>
        //         </select>
        //       )}
        //     </Field>
        //     <ErrorMessage
        //       name="featuredProductStatus"
        //       component="div"
        //       className="text-red-500 text-sm mt-1"
        //     />
        //   </div>
        //   {/* Additional Description Field */}
        //   <div>
        //     <label
        //       htmlFor="additionalDescription"
        //       className="block font-semibold"
        //     >
        //       Additional Description
        //     </label>
        //     <Field
        //       as="textarea"
        //       id="additionalDescription"
        //       name="additionalDescription"
        //       placeholder="Add any additional details..."
        //       className="w-full p-2 border rounded-md"
        //       rows={4}
        //     />
        //     <ErrorMessage
        //       name="additionalDescription"
        //       component="div"
        //       className="text-red-500 text-sm"
        //     />
        //   </div>
        //   {/* Images to Select */}
        //   <div className="mt-4">
        //     <label
        //       htmlFor="offer-images"
        //       className="block text-sm font-semibold text-gray-700 mb-2"
        //     >
        //       Upload Any Images Of The Offer
        //     </label>
        //     <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        //       {Array.from({ length: 3 }).map((_, index) => (
        //         <div
        //           key={index}
        //           className="flex flex-col items-center space-y-2"
        //         >
        //           <label
        //             htmlFor={`offer-image-${index}`}
        //             className="cursor-pointer flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-md hover:border-blue-400 hover:bg-gray-50"
        //           >
        //             <Image
        //               src={previewImages[index] || "/imagetoselect.png"}
        //               alt="Select Image"
        //               className="object-cover w-20 h-20 rounded-md"
        //               width={100}
        //               height={100}
        //             />
        //             <span className="text-sm text-gray-500">Select Image</span>
        //           </label>
        //           <Field name={`images[${index}]`}>
        //             {({
        //               form,
        //             }: {
        //               form: FormikProps<SubmitExchangeDetails>;
        //             }) => (
        //               <input
        //                 type="file"
        //                 id={`offer-image-${index}`}
        //                 accept="image/*"
        //                 className="hidden"
        //                 onChange={(event) => {
        //                   const file = event.target.files?.[0] || undefined;

        //                   // Update Formik state
        //                   form.setFieldValue(`images[${index}]`, file);

        //                   // Update preview
        //                   if (file) {
        //                     const reader = new FileReader();
        //                     reader.onload = () => {
        //                       setPreviewImages((prev) => {
        //                         const updatedPreviews = [...prev];
        //                         updatedPreviews[index] =
        //                           reader.result as string;
        //                         return updatedPreviews;
        //                       });
        //                     };
        //                     reader.readAsDataURL(file);
        //                   } else {
        //                     setPreviewImages((prev) => {
        //                       const updatedPreviews = [...prev];
        //                       updatedPreviews[index] = null;
        //                       return updatedPreviews;
        //                     });
        //                   }
        //                 }}
        //               />
        //             )}
        //           </Field>
        //         </div>
        //       ))}
        //     </div>
        //     <ErrorMessage
        //       name="images"
        //       component="div"
        //       className="text-red-500 text-sm mt-2"
        //     />
        //   </div>
        //   {/* Offer Dates */}
        //   <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        //     {/* Start Date */}
        //     <div>
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Offer Start Date
        //       </label>
        //       <Field name="startDate">
        //         {({ field }: FieldProps) => (
        //           <input
        //             {...field}
        //             type="date"
        //             className="w-full p-2 border rounded-md"
        //           />
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="startDate"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* End Date */}
        //     <div>
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Offer End Date
        //       </label>
        //       <Field name="endDate">
        //         {({ field }: FieldProps) => (
        //           <input
        //             {...field}
        //             type="date"
        //             className="w-full p-2 border rounded-md"
        //           />
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="endDate"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>
        //   </div>
        //   {/* material conditions */}
        //   <div>
        //     <h3 className="text-lg font-bold text-center">
        //       Material conditions of the exchange
        //     </h3>

        //     {/* Estimated Value */}
        //     <div>
        //       <label className="font-semibold text-gray-700">
        //         Estimated value of the exchange
        //       </label>
        //       <Field name="materialConditions.estimatedValue">
        //         {({ field }: FieldProps) => (
        //           <input
        //             {...field}
        //             type="number"
        //             className="w-full p-2 border rounded-md"
        //             placeholder="Enter value"
        //           />
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="materialConditions.estimatedValue"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* Decision: Radio Buttons */}
        //     <div>
        //       <label className="block text-gray-700 mb-1">
        //         Deposit Payment for Booking
        //       </label>
        //       <div role="group" className="flex gap-4">
        //         <label>
        //           <Field
        //             type="radio"
        //             name="materialConditions.decision"
        //             value="yes"
        //           />{" "}
        //           Yes
        //         </label>
        //         <label>
        //           <Field
        //             type="radio"
        //             name="materialConditions.decision"
        //             value="no"
        //           />{" "}
        //           No
        //         </label>
        //       </div>
        //       <ErrorMessage
        //         name="materialConditions.decision"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* Deposit Percentage (Conditional Field) */}
        //     {values.materialConditions.decision === "yes" && (
        //       <div>
        //         <label className="block text-gray-700 mb-1">
        //           Deposit Percentage (%)
        //         </label>
        //         <Field name="materialConditions.depositPayment.percentage">
        //           {({ field }: FieldProps) => (
        //             <input
        //               {...field}
        //               type="number"
        //               min={0}
        //               max={100}
        //               className="w-full p-2 border rounded-md"
        //               placeholder="Enter percentage"
        //             />
        //           )}
        //         </Field>
        //         <ErrorMessage
        //           name="materialConditions.depositPayment.percentage"
        //           component="div"
        //           className="text-red-500 text-sm"
        //         />
        //       </div>
        //     )}
        //   </div>
        //   {/* Other Contingent Coverage Required */}
        //   <div className="font-semibold mt-4">
        //     <label htmlFor="materialConditions.otherContingentCoverageRequired">
        //       Other Contingent Coverage Required
        //     </label>
        //     <Field name="materialConditions.otherContingentCoverageRequired">
        //       {({ field }: FieldProps) => (
        //         <input
        //           {...field}
        //           type="text"
        //           className="w-full p-2 border rounded-md"
        //           placeholder="Specify other contingent coverage"
        //         />
        //       )}
        //     </Field>
        //     <ErrorMessage
        //       name="materialConditions.otherContingentCoverageRequired"
        //       component="div"
        //       className="text-red-500 text-sm"
        //     />
        //   </div>
        //   {/* Guarantees */}
        //   <div>
        //     <div className="mt-4">
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Money Back Guarantee
        //       </label>
        //       <div role="group" className="flex gap-4">
        //         <label>
        //           <Field
        //             type="radio"
        //             name="guarantees.moneyBackGuarantee"
        //             value="yes"
        //           />
        //           Yes
        //         </label>
        //         <label>
        //           <Field
        //             type="radio"
        //             name="guarantees.moneyBackGuarantee"
        //             value="no"
        //           />
        //           No
        //         </label>
        //       </div>
        //       <ErrorMessage
        //         name="guarantees.moneyBackGuarantee"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     <div className="mt-4">
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Satisfaction Guarantee
        //       </label>
        //       <div role="group" className="flex gap-4">
        //         <label>
        //           <Field
        //             type="radio"
        //             name="guarantees.satisfactionGuarantee"
        //             value="yes"
        //           />
        //           Yes
        //         </label>
        //         <label>
        //           <Field
        //             type="radio"
        //             name="guarantees.satisfactionGuarantee"
        //             value="no"
        //           />
        //           No
        //         </label>
        //       </div>
        //       <ErrorMessage
        //         name="guarantees.satisfactionGuarantee"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>
        //   </div>
        //   {/* Payment Details */}
        //   {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        //   {/* Desired Payment Form
        //   <div className="w-full">
        //     <label className="block text-gray-700 font-semibold mb-1">
        //       Desired Payment Form
        //     </label>
        //     <Field name="paymentDetails.desiredPaymentForm">
        //       {({ field }: FieldProps) => (
        //         <select
        //           {...field}
        //           className="w-full p-2 border rounded-md focus:outline-blue-500"
        //         >
        //           <option value="" disabled>
        //             Select Payment Form
        //           </option>
        //           <option value="exchange-sum">
        //             Exchange + or - Additional Sum
        //           </option>
        //           <option value="exchange-service">
        //             Exchange + or - Benefit or Service
        //           </option>
        //         </select>
        //       )}
        //     </Field>
        //     <ErrorMessage
        //       name="paymentDetails.desiredPaymentForm"
        //       component="div"
        //       className="text-red-500 text-sm"
        //     />
        //   </div>

        //   {/* Payment Details */}
        //   <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        //     {/* Desired Payment Form */}
        //     <div className="w-full">
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Desired Payment Form
        //       </label>
        //       <Field name="paymentDetails.desiredPaymentForm">
        //         {({ field }: FieldProps) => (
        //           <select
        //             {...field}
        //             className="w-full p-2 border rounded-md focus:outline-blue-500"
        //           >
        //             <option value="" disabled>
        //               Select Payment Form
        //             </option>
        //             <option value="exchange-sum">
        //               Exchange + or - Additional Sum
        //             </option>
        //             <option value="exchange-service">
        //               Exchange + or - Benefit or Service
        //             </option>
        //           </select>
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="paymentDetails.desiredPaymentForm"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* Desired Payment Type */}
        //     <div className="w-full">
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Desired Payment Type
        //       </label>
        //       <Field name="paymentDetails.desiredPaymentType">
        //         {({ field }: FieldProps) => (
        //           <select
        //             {...field}
        //             className="w-full p-2 border rounded-md focus:outline-blue-500"
        //           >
        //             <option value="" disabled>
        //               Select Payment Type
        //             </option>
        //             <option value="hand-to-hand">Hand to Hand</option>
        //             <option value="before-delivery">
        //               Exchange & Payment Before Delivery
        //             </option>
        //             <option value="after-delivery">
        //               Exchange & Payment After Delivery
        //             </option>
        //           </select>
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="paymentDetails.desiredPaymentType"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>
        //   </div>

        //   <div className="mt-6">
        //     <h2 className="text-xl font-bold text-center mb-4">
        //       Delivery Conditions
        //     </h2>

        //     {/* Pickup */}
        //     <div className="mt-4">
        //       <label className="block text-gray-700 font-semibold mb-1">
        //         Pickup
        //       </label>
        //       <div className="flex gap-4">
        //         <label className="flex items-center">
        //           <Field
        //             type="radio"
        //             name="deliveryConditions.pickup.allowed"
        //             value="yes"
        //           />
        //           <span className="ml-2">Yes</span>
        //         </label>
        //         <label className="flex items-center">
        //           <Field
        //             type="radio"
        //             name="deliveryConditions.pickup.allowed"
        //             value="no"
        //           />
        //           <span className="ml-2">No</span>
        //         </label>
        //       </div>
        //       <ErrorMessage
        //         name="deliveryConditions.pickup.allowed"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />

        //       {/* Conditional Fields for Pickup Details */}
        //       {values.deliveryConditions.pickup.allowed === "yes" && (
        //         <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
        //           {(["address", "country", "city", "campus"] as const).map(
        //             (key) => (
        //               <div key={key}>
        //                 <label
        //                   htmlFor={`deliveryConditions.pickup.details.${key}`}
        //                   className="block text-gray-700 font-semibold mb-1"
        //                 >
        //                   {key.charAt(0).toUpperCase() + key.slice(1)}{" "}
        //                   {/* Capitalize label */}
        //                 </label>
        //                 <Field
        //                   name={`deliveryConditions.pickup.details.${key}`}
        //                   className="w-full p-2 border rounded-md"
        //                   placeholder={`Enter ${key}`}
        //                 />
        //                 <ErrorMessage
        //                   name={`deliveryConditions.pickup.details.${key}`}
        //                   component="div"
        //                   className="text-red-500 text-sm"
        //                 />
        //               </div>
        //             )
        //           )}
        //         </div>
        //       )}
        //     </div>
        //   </div>
        //   {/* Delivery */}
        //   <div className="mt-4">
        //     <label className="block text-gray-700 font-semibold mb-1">
        //       Delivery
        //     </label>
        //     <div className="flex gap-4">
        //       <label className="flex items-center">
        //         <Field
        //           type="radio"
        //           name="deliveryConditions.delivery.allowed"
        //           value="yes"
        //         />
        //         <span className="ml-2">Yes</span>
        //       </label>
        //       <label className="flex items-center">
        //         <Field
        //           type="radio"
        //           name="deliveryConditions.delivery.allowed"
        //           value="no"
        //         />
        //         <span className="ml-2">No</span>
        //       </label>
        //     </div>
        //     <ErrorMessage
        //       name="deliveryConditions.delivery.allowed"
        //       component="div"
        //       className="text-red-500 text-sm"
        //     />

        //     {values.deliveryConditions.delivery.allowed === "yes" && (
        //       <>
        //         {/* Delivery Cost Option */}
        //         <div className="mt-4">
        //           <label className="block text-gray-700 font-semibold mb-1">
        //             Is there a delivery cost?
        //           </label>
        //           <div className="flex gap-4">
        //             <label className="flex items-center">
        //               <Field
        //                 type="radio"
        //                 name="deliveryConditions.delivery.costOption"
        //                 value="yes"
        //               />
        //               <span className="ml-2">Yes</span>
        //             </label>
        //             <label className="flex items-center">
        //               <Field
        //                 type="radio"
        //                 name="deliveryConditions.delivery.costOption"
        //                 value="no"
        //               />
        //               <span className="ml-2">No</span>
        //             </label>
        //           </div>
        //           <ErrorMessage
        //             name="deliveryConditions.delivery.costOption"
        //             component="div"
        //             className="text-red-500 text-sm"
        //           />
        //         </div>

        //         {/* Delivery Amount */}
        //         {values.deliveryConditions.delivery.costOption === "yes" && (
        //           <div className="mt-4">
        //             <label className="block text-gray-700 font-semibold mb-1">
        //               Delivery Cost Amount
        //             </label>
        //             <Field
        //               name="deliveryConditions.delivery.details.amount"
        //               placeholder="Enter delivery cost amount"
        //               className="w-full p-2 border rounded-md"
        //             />
        //             <ErrorMessage
        //               name="deliveryConditions.delivery.details.amount"
        //               component="div"
        //               className="text-red-500 text-sm"
        //             />
        //           </div>
        //         )}

        //         {/* Delivery Regions */}
        //         <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
        //           <div>
        //             <label className="block text-gray-700 mb-1">Country</label>
        //             <Field
        //               name="deliveryConditions.delivery.details.country"
        //               placeholder="Enter country"
        //               className="w-full p-2 border rounded-md"
        //             />
        //             <ErrorMessage
        //               name="deliveryConditions.delivery.details.country"
        //               component="div"
        //               className="text-red-500 text-sm"
        //             />
        //           </div>
        //           <div>
        //             <label className="block text-gray-700 mb-1">City</label>
        //             <Field
        //               name="deliveryConditions.delivery.details.city"
        //               placeholder="Enter city"
        //               className="w-full p-2 border rounded-md"
        //             />
        //             <ErrorMessage
        //               name="deliveryConditions.delivery.details.city"
        //               component="div"
        //               className="text-red-500 text-sm"
        //             />
        //           </div>
        //         </div>
        //       </>
        //     )}
        //   </div>
        //   {/* Geolocation */}
        //   <div className="mt-4">
        //     <h2 className="text-xl font-bold text-center mb-4">Geolocation</h2>
        //     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        //       {(["campus", "country"] as const).map((key) => (
        //         <div key={key} className="mt-4">
        //           {/* Label */}
        //           <label
        //             htmlFor={`geolocation.${key}`}
        //             className="block text-gray-700 font-semibold mb-1"
        //           >
        //             {key.charAt(0).toUpperCase() + key.slice(1)}
        //           </label>
        //           {/* Input Field */}
        //           <Field name={`geolocation.${key}`}>
        //             {({ field }: { field: FieldInputProps<string> }) => (
        //               <input
        //                 {...field}
        //                 id={`geolocation.${key}`}
        //                 type="text"
        //                 className="w-full p-2 border rounded-md"
        //                 placeholder={`Enter ${key}`}
        //               />
        //             )}
        //           </Field>
        //           {/* Error Message */}
        //           <ErrorMessage
        //             name={`geolocation.${key}`}
        //             component="div"
        //             className="text-red-500 text-sm"
        //           />
        //         </div>
        //       ))}
        //     </div>
        //   </div>
        //   {/* Other Special Conditions */}
        //   <div className="mt-4">
        //     <h2 className="text-xl font-bold text-center mb-4">
        //       Other Special Conditions
        //     </h2>

        //     {/* Additional Description */}
        //     <div>
        //       <label
        //         htmlFor="otherSpecialConditions.additionalDescription"
        //         className="block text-gray-700 font-semibold mb-1"
        //       >
        //         Additional Description of the payment or Delivery Method
        //       </label>
        //       <Field name="otherSpecialConditions.additionalDescription">
        //         {({ field }: { field: FieldInputProps<string> }) => (
        //           <textarea
        //             {...field}
        //             id="otherSpecialConditions.additionalDescription"
        //             rows={4}
        //             className="w-full p-3 border rounded-md resize-none"
        //             placeholder="Enter additional description..."
        //           />
        //         )}
        //       </Field>
        //       <ErrorMessage
        //         name="otherSpecialConditions.additionalDescription"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>

        //     {/* File Upload */}
        //     <div className="mt-4">
        //       <label
        //         htmlFor="fileUpload"
        //         className="block text-gray-700 font-semibold mb-1"
        //       >
        //         Upload File
        //       </label>
        //       <div className="flex items-center space-x-4">
        //         <label
        //           htmlFor="fileUpload"
        //           className="flex items-center justify-center w-full p-4 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-100"
        //         >
        //           <span className="text-gray-600 text-sm">
        //             {values.otherSpecialConditions.uploadedFiles.length > 0
        //               ? values.otherSpecialConditions.uploadedFiles[0].name
        //               : "Choose a file"}
        //           </span>
        //         </label>
        //         <Field name="otherSpecialConditions.uploadedFiles">
        //           {({
        //             form,
        //           }: {
        //             form: FormikProps<SubmitExchangeFormProps>;
        //           }) => (
        //             <input
        //               id="fileUpload"
        //               type="file"
        //               className="hidden"
        //               accept=".jpeg, .jpg, .png, .pdf, .doc, .docx"
        //               onChange={(
        //                 event: React.ChangeEvent<HTMLInputElement>
        //               ) => {
        //                 const file = event.target.files?.[0];
        //                 if (file) {
        //                   // Update Formik field value
        //                   form.setFieldValue(
        //                     "otherSpecialConditions.uploadedFiles",
        //                     [file]
        //                   );
        //                 }
        //               }}
        //             />
        //           )}
        //         </Field>
        //       </div>
        //       <ErrorMessage
        //         name="otherSpecialConditions.uploadedFiles"
        //         component="div"
        //         className="text-red-500 text-sm"
        //       />
        //     </div>
        //   </div>
        //   {/* Debugging Section */}
        //   <pre>{JSON.stringify(errors, null, 2)}</pre>
        //   <p>Form is {isValid ? "valid" : "invalid"}</p>
        //   {/* Submit Button */}
        //   <button
        //     type="submit"
        //     className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md"
        //   >
        //     Next
        //   </button>
        // </Form>


<Form className="space-y-6 p-4 md:p-8 bg-white shadow-xl rounded-lg max-w-4xl mx-auto border border-gray-200">
  {/* Title of the Submit Exchange*/}
  <div className="text-center">
    <h2 className="text-xl md:text-2xl font-bold text-blue-700 mb-4">
      Submit An Exchange Offer
    </h2>
    <p className="text-gray-600">
      Finance Your Projects Or Expenses With Your Unused Services Or Goods!
    </p>
  </div>
  {/* Zone 1 Insertion Banner */}
  <div className="text-center p-5">
    <h2 className="mb-5 text-lg font-bold">
      Zone 1 Insertion Banner Advertising
    </h2>
    <label
      htmlFor="zoneOneBanner"
      className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
    >
      <Image
        src={previewZoneOneBanner || "/imagetoselect.png"}
        alt="Upload Banner"
        className="max-w-full h-auto mx-auto mb-2"
        width={100}
        height={100}
      />
      <p className="text-gray-600">Click to upload</p>
    </label>
    <Field name="zoneOneBanner">
      {({ field }: FieldProps) => (
        <input
          id="zoneOneBanner"
          type="file"
          name={field.name}
          accept="image/*"
          className="hidden"
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
            const file = event.target.files?.[0] || null;

            // Update Formik state
            setFieldValue("zoneOneBanner", file);

            // Update preview
            if (file) {
              const reader = new FileReader();
              reader.onload = () =>
                setPreviewZoneOneBanner(reader.result as string);
              reader.readAsDataURL(file);
            } else {
              setPreviewZoneOneBanner(null);
            }
          }}
        />
      )}
    </Field>
    <ErrorMessage
      name="zoneOneBanner"
      component="div"
      className="text-red-500 text-sm mt-2"
    />
  </div>
  {/* Title Field */}
  <div>
    <label htmlFor="title" className="block font-semibold">
      Title of the offer
    </label>
    <Field
      id="title"
      name="title"
      placeholder="Enter title"
      className="w-full p-2 border rounded-md"
    />
    <ErrorMessage
      name="title"
      component="div"
      className="text-red-500 text-sm"
    />
  </div>
  {/* Offer Type Field */}
  <div>
    <label className="block font-semibold mb-2">What do you offer</label>
    <div role="group" aria-labelledby="offerType">
      {/* Radio Button for "Good" */}
      <label className="inline-flex items-center mr-4">
        <Field
          type="radio"
          name="offerType"
          value="Good"
          className="form-radio h-4 w-4 text-blue-600"
        />
        <span className="ml-2">Good</span>
      </label>

      {/* Radio Button for "Service" */}
      <label className="inline-flex items-center">
        <Field
          type="radio"
          name="offerType"
          value="Service"
          className="form-radio h-4 w-4 text-blue-600"
        />
        <span className="ml-2">Service</span>
      </label>
    </div>

    {/* Validation Error Message */}
    <ErrorMessage
      name="offerType"
      component="div"
      className="text-red-500 text-sm mt-1"
    />
  </div>
  {/* Category and SubCategory Fields */}
  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
    {/* Category */}
    <div>
      <label className="block text-gray-700 font-semibold mb-1">Category</label>
      <Field
        as="select"
        name="category"
        className="w-full p-2 border rounded-md"
        value={values.category}
        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
          const selectedValue = event.target.value;
          setFieldValue("category", selectedValue);
        }}
      >
        <option value="" disabled>
          Select Category
        </option>
        <option value="Electronics">Electronics</option>
        <option value="Health">Health</option>
      </Field>
      <ErrorMessage
        name="category"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* SubCategory */}
    <div>
      <label className="block text-gray-700 font-semibold mb-1">
        SubCategory
      </label>
      <Field
        as="select"
        name="subcategory"
        className="w-full p-2 border rounded-md"
        value={values.subcategory}
        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
          const selectedValue = event.target.value;
          setFieldValue("subcategory", selectedValue);
        }}
      >
        <option value="" disabled>
          Select SubCategory
        </option>
        <option value="Accessories">Accessories</option>
        <option value="Health">Health</option>
      </Field>
      <ErrorMessage
        name="subcategory"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>
  </div>
  {/* Featured Product Status */}
  <div>
    <label className="block text-gray-700 font-semibold mb-1">
      Featured Product Status
    </label>
    <Field name="featuredProductStatus">
      {({ field }: FieldProps) => (
        <select
          {...field}
          className="w-full p-2 border rounded-md"
          onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
            const selectedValue = event.target.value;
            setFieldValue("featuredProductStatus", selectedValue);
          }}
        >
          <option value="" disabled>
            Select Status
          </option>
          <option value="New">New</option>
          <option value="GoodCondition">Good Condition</option>
          <option value="Used">Used</option>
        </select>
      )}
    </Field>
    <ErrorMessage
      name="featuredProductStatus"
      component="div"
      className="text-red-500 text-sm mt-1"
    />
  </div>
  {/* Additional Description Field */}
  <div>
    <label htmlFor="additionalDescription" className="block font-semibold">
      Additional Description
    </label>
    <Field
      as="textarea"
      id="additionalDescription"
      name="additionalDescription"
      placeholder="Add any additional details..."
      className="w-full p-2 border rounded-md"
      rows={4}
    />
    <ErrorMessage
      name="additionalDescription"
      component="div"
      className="text-red-500 text-sm"
    />
  </div>
  {/* Images to Select */}
  <div className="mt-4">
    <label
      htmlFor="offer-images"
      className="block text-sm font-semibold text-gray-700 mb-2"
    >
      Upload Any Images Of The Offer
    </label>
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
      {Array.from({ length: 3 }).map((_, index) => (
        <div key={index} className="flex flex-col items-center space-y-2">
          <label
            htmlFor={`offer-image-${index}`}
            className="cursor-pointer flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-md hover:border-blue-400 hover:bg-gray-50"
          >
            <Image
              src={previewImages[index] || "/imagetoselect.png"}
              alt="Select Image"
              className="object-cover w-20 h-20 rounded-md"
              width={100}
              height={100}
            />
            <span className="text-sm text-gray-500">Select Image</span>
          </label>
          <Field name={`images[${index}]`}>
            {({ form }: { form: FormikProps<SubmitExchangeDetails> }) => (
              <input
                type="file"
                id={`offer-image-${index}`}
                accept="image/*"
                className="hidden"
                onChange={(event) => {
                  const file = event.target.files?.[0] || undefined;

                  // Update Formik state
                  form.setFieldValue(`images[${index}]`, file);

                  // Update preview
                  if (file) {
                    const reader = new FileReader();
                    reader.onload = () => {
                      setPreviewImages((prev) => {
                        const updatedPreviews = [...prev];
                        updatedPreviews[index] = reader.result as string;
                        return updatedPreviews;
                      });
                    };
                    reader.readAsDataURL(file);
                  } else {
                    setPreviewImages((prev) => {
                      const updatedPreviews = [...prev];
                      updatedPreviews[index] = null;
                      return updatedPreviews;
                    });
                  }
                }}
              />
            )}
          </Field>
        </div>
      ))}
    </div>
    <ErrorMessage
      name="images"
      component="div"
      className="text-red-500 text-sm mt-2"
    />
  </div>
  {/* Offer Dates */}
  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
    {/* Start Date */}
    <div>
      <label className="block text-gray-700 font-semibold mb-1">
        Offer Start Date
      </label>
      <Field name="startDate">
        {({ field }: FieldProps) => (
          <input
            {...field}
            type="date"
            className="w-full p-2 border rounded-md"
          />
        )}
      </Field>
      <ErrorMessage
        name="startDate"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* End Date */}
    <div>
      <label className="block text-gray-700 font-semibold mb-1">
        Offer End Date
      </label>
      <Field name="endDate">
        {({ field }: FieldProps) => (
          <input
            {...field}
            type="date"
            className="w-full p-2 border rounded-md"
          />
        )}
      </Field>
      <ErrorMessage
        name="endDate"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>
  </div>
  {/* material conditions */}
  <div>
    <h3 className="text-lg font-bold text-center">
      Material conditions of the exchange
    </h3>

    {/* Estimated Value */}
    <div>
      <label className="font-semibold text-gray-700">
        Estimated value of the exchange
      </label>
      <Field name="materialConditions.estimatedValue">
        {({ field }: FieldProps) => (
          <input
            {...field}
            type="number"
            className="w-full p-2 border rounded-md"
            placeholder="Enter value"
          />
        )}
      </Field>
      <ErrorMessage
        name="materialConditions.estimatedValue"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* Decision: Radio Buttons */}
    <div>
      <label className="block text-gray-700 mb-1">
        Deposit Payment for Booking
      </label>
      <div role="group" className="flex gap-4">
        <label>
          <Field type="radio" name="materialConditions.decision" value="yes" />{" "}
          Yes
        </label>
        <label>
          <Field type="radio" name="materialConditions.decision" value="no" />{" "}
          No
        </label>
      </div>
      <ErrorMessage
        name="materialConditions.decision"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* Deposit Percentage (Conditional Field) */}
    {values.materialConditions.decision === "yes" && (
      <div>
        <label className="block text-gray-700 mb-1">
          Deposit Percentage (%)
        </label>
        <Field name="materialConditions.depositPayment.percentage">
          {({ field }: FieldProps) => (
            <input
              {...field}
              type="number"
              min={0}
              max={100}
              className="w-full p-2 border rounded-md"
              placeholder="Enter percentage"
            />
          )}
        </Field>
        <ErrorMessage
          name="materialConditions.depositPayment.percentage"
          component="div"
          className="text-red-500 text-sm"
        />
      </div>
    )}
  </div>
  {/* Other Contingent Coverage Required */}
  <div className="font-semibold mt-4">
    <label htmlFor="materialConditions.otherContingentCoverageRequired">
      Other Contingent Coverage Required
    </label>
    <Field name="materialConditions.otherContingentCoverageRequired">
      {({ field }: FieldProps) => (
        <input
          {...field}
          type="text"
          className="w-full p-2 border rounded-md"
          placeholder="Specify other contingent coverage"
        />
      )}
    </Field>
    <ErrorMessage
      name="materialConditions.otherContingentCoverageRequired"
      component="div"
      className="text-red-500 text-sm"
    />
  </div>
  {/* Guarantees */}
  <div>
    <div className="mt-4">
      <label className="block text-gray-700 font-semibold mb-1">
        Money Back Guarantee
      </label>
      <div role="group" className="flex gap-4">
        <label>
          <Field
            type="radio"
            name="guarantees.moneyBackGuarantee"
            value="yes"
          />
          Yes
        </label>
        <label>
          <Field type="radio" name="guarantees.moneyBackGuarantee" value="no" />
          No
        </label>
      </div>
      <ErrorMessage
        name="guarantees.moneyBackGuarantee"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    <div className="mt-4">
      <label className="block text-gray-700 font-semibold mb-1">
        Satisfaction Guarantee
      </label>
      <div role="group" className="flex gap-4">
        <label>
          <Field
            type="radio"
            name="guarantees.satisfactionGuarantee"
            value="yes"
          />
          Yes
        </label>
        <label>
          <Field
            type="radio"
            name="guarantees.satisfactionGuarantee"
            value="no"
          />
          No
        </label>
      </div>
      <ErrorMessage
        name="guarantees.satisfactionGuarantee"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>
  </div>
  {/* Payment Details */}
  {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
  {/* Desired Payment Form
  <div className="w-full">
    <label className="block text-gray-700 font-semibold mb-1">
      Desired Payment Form
    </label>
    <Field name="paymentDetails.desiredPaymentForm">
      {({ field }: FieldProps) => (
        <select
          {...field}
          className="w-full p-2 border rounded-md focus:outline-blue-500"
        >
          <option value="" disabled>
            Select Payment Form
          </option>
          <option value="exchange-sum">
            Exchange + or - Additional Sum
          </option>
          <option value="exchange-service">
            Exchange + or - Benefit or Service
          </option>
        </select>
      )}
    </Field>
    <ErrorMessage
      name="paymentDetails.desiredPaymentForm"
      component="div"
      className="text-red-500 text-sm"
    />
  </div>

  {/* Desired Payment Type
  <div className="w-full">
    <label className="block text-gray-700 font-semibold mb-1">
      Desired Payment Type
    </label>
    <Field name="paymentDetails.desiredPaymentType">
      {({ field }: FieldProps) => (
        <select
          {...field}
          className="w-full p-2 border rounded-md focus:outline-blue-500"
        >
          <option value="" disabled>
            Select Payment Type
          </option>
          <option value="hand-to-hand">Hand to Hand</option>
          <option value="before-delivery">
            Exchange & Payment Before Delivery
          </option>
          <option value="after-delivery">
            Exchange & Payment After Delivery
          </option>
        </select>
      )}
    </Field>
    <ErrorMessage
      name="paymentDetails.desiredPaymentType"
      component="div"
      className="text-red-500 text-sm"
    />
  </div>
</div> */}
  {/* Payment Details */}
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
    {/* Desired Payment Form */}
    <div className="w-full">
      <label className="block text-gray-700 font-semibold mb-1">
        Desired Payment Form
      </label>
      <Field name="paymentDetails.desiredPaymentForm">
        {({ field }: FieldProps) => (
          <select
            {...field}
            className="w-full p-2 border rounded-md focus:outline-blue-500"
          >
            <option value="" disabled>
              Select Payment Form
            </option>
            <option value="exchange-sum">Exchange + or - Additional Sum</option>
            <option value="exchange-service">
              Exchange + or - Benefit or Service
            </option>
          </select>
        )}
      </Field>
      <ErrorMessage
        name="paymentDetails.desiredPaymentForm"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* Desired Payment Type */}
    <div className="w-full">
      <label className="block text-gray-700 font-semibold mb-1">
        Desired Payment Type
      </label>
      <Field name="paymentDetails.desiredPaymentType">
        {({ field }: FieldProps) => (
          <select
            {...field}
            className="w-full p-2 border rounded-md focus:outline-blue-500"
          >
            <option value="" disabled>
              Select Payment Type
            </option>
            <option value="hand-to-hand">Hand to Hand</option>
            <option value="before-delivery">
              Exchange & Payment Before Delivery
            </option>
            <option value="after-delivery">
              Exchange & Payment After Delivery
            </option>
          </select>
        )}
      </Field>
      <ErrorMessage
        name="paymentDetails.desiredPaymentType"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>
  </div>

  <div className="mt-6">
    <h2 className="text-xl font-bold text-center mb-4">Delivery Conditions</h2>

    {/* Pickup */}
    <div className="mt-4">
      <label className="block text-gray-700 font-semibold mb-1">Pickup</label>
      <div className="flex gap-4">
        <label className="flex items-center">
          <Field
            type="radio"
            name="deliveryConditions.pickup.allowed"
            value="yes"
          />
          <span className="ml-2">Yes</span>
        </label>
        <label className="flex items-center">
          <Field
            type="radio"
            name="deliveryConditions.pickup.allowed"
            value="no"
          />
          <span className="ml-2">No</span>
        </label>
      </div>
      <ErrorMessage
        name="deliveryConditions.pickup.allowed"
        component="div"
        className="text-red-500 text-sm"
      />

      {/* Conditional Fields for Pickup Details */}
      {values.deliveryConditions.pickup.allowed === "yes" && (
        <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
          {(["address", "country", "city", "campus"] as const).map((key) => (
            <div key={key}>
              <label
                htmlFor={`deliveryConditions.pickup.details.${key}`}
                className="block text-gray-700 font-semibold mb-1"
              >
                {key.charAt(0).toUpperCase() + key.slice(1)}{" "}
                {/* Capitalize label */}
              </label>
              <Field
                name={`deliveryConditions.pickup.details.${key}`}
                className="w-full p-2 border rounded-md"
                placeholder={`Enter ${key}`}
              />
              <ErrorMessage
                name={`deliveryConditions.pickup.details.${key}`}
                component="div"
                className="text-red-500 text-sm"
              />
            </div>
          ))}
        </div>
      )}
    </div>
  </div>
  {/* Delivery */}
  <div className="mt-4">
    <label className="block text-gray-700 font-semibold mb-1">Delivery</label>
    <div className="flex gap-4">
      <label className="flex items-center">
        <Field
          type="radio"
          name="deliveryConditions.delivery.allowed"
          value="yes"
        />
        <span className="ml-2">Yes</span>
      </label>
      <label className="flex items-center">
        <Field
          type="radio"
          name="deliveryConditions.delivery.allowed"
          value="no"
        />
        <span className="ml-2">No</span>
      </label>
    </div>
    <ErrorMessage
      name="deliveryConditions.delivery.allowed"
      component="div"
      className="text-red-500 text-sm"
    />

    {values.deliveryConditions.delivery.allowed === "yes" && (
      <>
        {/* Delivery Cost Option */}
        <div className="mt-4">
          <label className="block text-gray-700 font-semibold mb-1">
            Is there a delivery cost?
          </label>
          <div className="flex gap-4">
            <label className="flex items-center">
              <Field
                type="radio"
                name="deliveryConditions.delivery.costOption"
                value="yes"
              />
              <span className="ml-2">Yes</span>
            </label>
            <label className="flex items-center">
              <Field
                type="radio"
                name="deliveryConditions.delivery.costOption"
                value="no"
              />
              <span className="ml-2">No</span>
            </label>
          </div>
          <ErrorMessage
            name="deliveryConditions.delivery.costOption"
            component="div"
            className="text-red-500 text-sm"
          />
        </div>

        {/* Delivery Amount */}
        {values.deliveryConditions.delivery.costOption === "yes" && (
          <div className="mt-4">
            <label className="block text-gray-700 font-semibold mb-1">
              Delivery Cost Amount
            </label>
            <Field
              name="deliveryConditions.delivery.details.amount"
              placeholder="Enter delivery cost amount"
              className="w-full p-2 border rounded-md"
            />
            <ErrorMessage
              name="deliveryConditions.delivery.details.amount"
              component="div"
              className="text-red-500 text-sm"
            />
          </div>
        )}

        {/* Delivery Regions */}
        <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label className="block text-gray-700 mb-1">Country</label>
            <Field
              name="deliveryConditions.delivery.details.country"
              placeholder="Enter country"
              className="w-full p-2 border rounded-md"
            />
            <ErrorMessage
              name="deliveryConditions.delivery.details.country"
              component="div"
              className="text-red-500 text-sm"
            />
          </div>
          <div>
            <label className="block text-gray-700 mb-1">City</label>
            <Field
              name="deliveryConditions.delivery.details.city"
              placeholder="Enter city"
              className="w-full p-2 border rounded-md"
            />
            <ErrorMessage
              name="deliveryConditions.delivery.details.city"
              component="div"
              className="text-red-500 text-sm"
            />
          </div>
        </div>
      </>
    )}
  </div>
  {/* Geolocation */}
  <div className="mt-4">
    <h2 className="text-xl font-bold text-center mb-4">Geolocation</h2>
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {(["campus", "country"] as const).map((key) => (
        <div key={key} className="mt-4">
          {/* Label */}
          <label
            htmlFor={`geolocation.${key}`}
            className="block text-gray-700 font-semibold mb-1"
          >
            {key.charAt(0).toUpperCase() + key.slice(1)}
          </label>
          {/* Input Field */}
          <Field name={`geolocation.${key}`}>
            {({ field }: { field: FieldInputProps<string> }) => (
              <input
                {...field}
                id={`geolocation.${key}`}
                type="text"
                className="w-full p-2 border rounded-md"
                placeholder={`Enter ${key}`}
              />
            )}
          </Field>
          {/* Error Message */}
          <ErrorMessage
            name={`geolocation.${key}`}
            component="div"
            className="text-red-500 text-sm"
          />
        </div>
      ))}
    </div>
  </div>
  {/* Other Special Conditions */}
  <div className="mt-4">
    <h2 className="text-xl font-bold text-center mb-4">
      Other Special Conditions
    </h2>

    {/* Additional Description */}
    <div>
      <label
        htmlFor="otherSpecialConditions.additionalDescription"
        className="block text-gray-700 font-semibold mb-1"
      >
        Additional Description of the payment or Delivery Method
      </label>
      <Field name="otherSpecialConditions.additionalDescription">
        {({ field }: { field: FieldInputProps<string> }) => (
          <textarea
            {...field}
            id="otherSpecialConditions.additionalDescription"
            rows={4}
            className="w-full p-3 border rounded-md resize-none"
            placeholder="Enter additional description..."
          />
        )}
      </Field>
      <ErrorMessage
        name="otherSpecialConditions.additionalDescription"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>

    {/* File Upload */}
    <div className="mt-4">
      <label
        htmlFor="fileUpload"
        className="block text-gray-700 font-semibold mb-1"
      >
        Upload File
      </label>
      <div className="flex items-center space-x-4">
        <label
          htmlFor="fileUpload"
          className="flex items-center justify-center w-full p-4 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-100"
        >
          <span className="text-gray-600 text-sm">
            {values.otherSpecialConditions.uploadedFiles.length > 0
              ? values.otherSpecialConditions.uploadedFiles[0].name
              : "Choose a file"}
          </span>
        </label>
        <Field name="otherSpecialConditions.uploadedFiles">
          {({ form }: { form: FormikProps<OtherSpecialConditions> }) => (
            <input
              id="fileUpload"
              type="file"
              className="hidden"
              accept=".jpeg, .jpg, .png, .pdf, .doc, .docx"
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                const file = event.target.files?.[0];
                if (file) {
                  // Update Formik field value
                  form.setFieldValue("otherSpecialConditions.uploadedFiles", [
                    file,
                  ]);
                }
              }}
            />
          )}
        </Field>
      </div>
      <ErrorMessage
        name="otherSpecialConditions.uploadedFiles"
        component="div"
        className="text-red-500 text-sm"
      />
    </div>
  </div>
  {/* Debugging Section */}
  <pre>{JSON.stringify(errors, null, 2)}</pre>
  <p>Form is {isValid ? "valid" : "invalid"}</p>
  {/* Submit Button */}
  <button
    // type="submit"

    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md"
  >
    Next
  </button>
</Form>;





// <Formik
// initialValues={initialValues}
// validationSchema={validationSchema}
// onSubmit={(values, { resetForm }) => {
//   console.log("Formik Submitted Values:", values);
//   resetForm(); // Clear the form after submission
// }}
// enableReinitialize
// >
// {({ setFieldValue, values }) => (
//   <Form className="space-y-6 p-4 md:p-8 bg-white shadow-xl rounded-lg max-w-4xl mx-auto border border-gray-200">

// <div>
// <h3 className="text-lg font-bold text-center">
//   Material conditions of the exchange
// </h3>

// {/* Estimated Value */}
// <div>
//   <label className="font-semibold text-gray-700">
//     Estimated value of the exchange
//   </label>
//   <Field name="estimatedValue">
//     {({ field }: FieldProps) => (
//       <input
//         {...field}
//         type="number"
//         className="w-full p-2 border rounded-md"
//         placeholder="Enter value"
//       />
//     )}
//   </Field>
//   <ErrorMessage
//     name="estimatedValue"
//     component="div"
//     className="text-red-500 text-sm"
//   />
// </div>

// {/* Decision: Radio Buttons */}
// <div>
//   <label className="block text-gray-700 mb-1">
//     Deposit Payment for Booking
//   </label>
//   <div role="group" className="flex gap-4">
//     <label>
//       <Field type="radio" name="decision" value="yes" /> Yes
//     </label>
//     <label>
//       <Field type="radio" name="decision" value="no" /> No
//     </label>
//   </div>
//   <ErrorMessage
//     name="decision"
//     component="div"
//     className="text-red-500 text-sm"
//   />
// </div>

// {/* Deposit Percentage (Conditional Field) */}
// {values.materialConditions.decision === "yes" && (
//   <div>
//     <label className="block text-gray-700 mb-1">
//       Deposit Percentage (%)
//     </label>
//     <Field name="depositPayment.percentage">
//       {({ field }: FieldProps) => (
//         <input
//           {...field}
//           type="number"
//           min={0}
//           max={100}
//           className="w-full p-2 border rounded-md"
//           placeholder="Enter percentage"
//         />
//       )}
//     </Field>
//     <ErrorMessage
//       name="depositPayment.percentage"
//       component="div"
//       className="text-red-500 text-sm"
//     />
//   </div>
// )}
// </div>

// {/* Submit Button */}
// <button
// type="submit"
// className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md"
// >
// Submit
// </button>
// </Form>
// )}
// </Formik>

// import {
//   Formik,
//   Form,
//   Field,
//   ErrorMessage,
//   FieldInputProps,
//   FormikProps,
//   FieldProps,
// } from "formik";
// import * as Yup from "yup";
// import Image from "next/image";
// import React from "react";
// import { useTranslations } from "next-intl";
// import { useDispatch } from "react-redux";
// import { setCurrentStep } from "@/store/slices/productForServiceFormSlice";
// // import { useFormContext } from "./ProductForServiceContext";
// // import { ProductForServiceFormContextType } from "@/types/ProductForServiceFormContextType";

// const validationSchema = Yup.object({
//   zoneOneBanner: Yup.mixed<File>()
//     .nullable()
//     .required("Zone One Banner is required")
//     .test(
//       "fileType",
//       "Unsupported file format. Only images are allowed.",
//       (value) =>
//         !value ||
//         (value instanceof File &&
//           ["image/jpeg", "image/png"].includes(value.type))
//     )
//     .test(
//       "fileSize",
//       "File size is too large. Maximum size is 5MB.",
//       (value) =>
//         !value || (value instanceof File && value.size <= 5 * 1024 * 1024)
//     ),

//   title: Yup.string().required("Title is required"),
// images: Yup.array()
//   .of(
//     Yup.mixed<File>()
//       .nullable()
//       .test(
//         "is-valid-file",
//         "Each item must be a valid file or null",
//         (value) => value === null || value instanceof File
//       )
//   )
//   .min(1, "At least one image is required")
//   .max(3, "No more than 3 images are allowed"),

//   offerType: Yup.string()
//     .oneOf(["Good", "Service"], "Invalid Offer Type")
//     .required("Offer Type is required"),
//   category: Yup.string().required("Category is required"),
//   subcategory: Yup.string().required("Subcategory is required"),
//   featuredProductStatus: Yup.string()
//     .oneOf(["New", "GoodCondition", "Used"], "Invalid Product Status")
//     .required("Product Status is required"),
//   additionalDescription: Yup.string().optional(),

//   startDate: Yup.date().required("Start date is required"),
//   endDate: Yup.date()
//     .required("End date is required")
//     .min(Yup.ref("startDate"), "End date can't be before start date"),

//   formOfExchange: Yup.string()
//     .oneOf(
//       ["Exchange", "Classic Sale", "Auction", "Donation"],
//       "Invalid Exchange Type"
//     )
//     .required("Form of Exchange is required"),

// materialConditions: Yup.object({
//   estimatedValue: Yup.number()
//     .required("Estimated value is required")
//     .min(0, "Value cannot be negative"),
//   decision: Yup.string()
//     .oneOf(["yes", "no"], "Invalid decision")
//     .required("Decision is required"),
//   depositPayment: Yup.object({
//     percentage: Yup.number().when("decision", {
//       is: (decision: string | undefined) =>
//         typeof decision === "string" && decision === "yes",
//       then: (schema) =>
//         schema
//           .min(0, "Percentage cannot be less than 0")
//           .max(100, "Percentage cannot exceed 100")
//           .required("Deposit percentage is required"),
//       otherwise: (schema) => schema.notRequired(),
//     }),
//   }),
//   otherContingentCoverageRequired: Yup.string().optional(),
// }),

//   guarantees: Yup.object({
//     moneyBackGuarantee: Yup.string()
//       .oneOf(["yes", "no"], "Invalid value")
//       .required("Money back guarantee is required"),
//     satisfactionGuarantee: Yup.string()
//       .oneOf(["yes", "no"], "Invalid value")
//       .required("Satisfaction guarantee is required"),
//   }),

//   paymentDetails: Yup.object({
//     desiredPaymentForm: Yup.string().required("Payment form is required"),
//     desiredPaymentType: Yup.string().required("Payment type is required"),
//   }),

//   deliveryConditions: Yup.object({
//     pickup: Yup.object({
//       allowed: Yup.string()
//         .oneOf(["yes", "no"], "Invalid option")
//         .required("Pickup allowed is required"),
//       details: Yup.object().when("allowed", (allowed: unknown) => {
//         if (allowed === "yes") {
//           return Yup.object({
//             address: Yup.string().required("Address is required"),
//             country: Yup.string().required("Country is required"),
//             city: Yup.string().required("City is required"),
//             campus: Yup.string().required("Campus is required"),
//           });
//         }
//         return Yup.object().nullable(); // Allow null if not "yes"
//       }),
//     }),
//     delivery: Yup.object({
//       allowed: Yup.string()
//         .oneOf(["yes", "no"], "Invalid option")
//         .required("Delivery allowed is required"),
//       details: Yup.object().when("allowed", (allowed: unknown) => {
//         if (allowed === "yes") {
//           return Yup.object({
//             cost: Yup.number()
//               .required("Cost is required")
//               .min(0, "Invalid cost"),
//             country: Yup.string().required("Country is required"),
//             city: Yup.string().required("City is required"),
//           });
//         }
//         return Yup.object().nullable(); // Allow null if not "yes"
//       }),
//     }),
//   }),

//   geolocation: Yup.object({
//     campus: Yup.string().required("Campus location is required"),
//     country: Yup.string().required("Country is required"),
//   }),

//   otherSpecialConditions: Yup.object({
//     additionalDescription: Yup.string().optional(),

//     uploadedFiles: Yup.array()
//       .of(
//         Yup.mixed<File>()
//           .required("File is required")
//           .test(
//             "fileType",
//             "Unsupported file format. Only images or documents are allowed.",
//             (value) => {
//               if (!value) return false;
//               const supportedTypes = [
//                 "image/jpeg",
//                 "image/png",
//                 "application/pdf",
//                 "application/msword",
//                 "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
//               ];
//               console.log("Validating file type:", value?.type); // Debug log
//               return (
//                 value instanceof File && supportedTypes.includes(value.type)
//               );
//             }
//           )
//           .test(
//             "fileSize",
//             "File size is too large. Maximum size is 5MB.",
//             (value) => value instanceof File && value.size <= 5 * 1024 * 1024
//           )
//       )
//       .min(1, "At least one file is required")
//       .required("File is required"),
//   }),
// });

// const SubmitexchangeForm = () => {
//   // const { formData, setFormData } = useFormContext();
//   console.log(formData);
//   const dispatch = useDispatch();
//   const t = useTranslations("form");

//   const [previewFileIcon, setPreviewFileIcon] = React.useState<string | null>(
//     null
//   );

//   const [selectedFileName, setSelectedFileName] = React.useState<string | null>(
//     null
//   );

//   //   const [previewImage, setPreviewImage] = useState("/imagetoselect.png");

//   const [previewImages, setPreviewImages] = React.useState<(string | null)[]>([
//     null,
//     null,
//     null,
//   ]);

//   const [previewZoneOneBanner, setPreviewZoneOneBanner] = React.useState<
//     string | null
//   >(null);

//   const initialValues: ProductForServiceFormContextType["ProductForServiceFormData"]["submitExchangeDetails"] =
//     {
//       zoneOneBanner: null,
//       title: "",
//       images: [null, null, null], // Array of File or null
//       offerType: "",
//       category: "",
//       subcategory: "",
//       featuredProductStatus: "",
//       additionalDescription: "",
//       startDate: null, // Represented as a Date or null
//       endDate: null, // Represented as a Date or null
//       formOfExchange: "",
//       materialConditions: {
//         estimatedValue: "",
//         decision: "",
//         depositPayment: { percentage: "" },
//         otherContingentCoverageRequired: "",
//       },
//       guarantees: {
//         moneyBackGuarantee: "",
//         satisfactionGuarantee: "",
//       },
//       paymentDetails: {
//         desiredPaymentForm: "",
//         desiredPaymentType: "",
//       },
//       deliveryConditions: {
//         pickup: {
//           allowed: "",
//           details: {
//             address: "",
//             country: "",
//             city: "",
//             campus: "",
//           },
//         },
//         delivery: {
//           allowed: "",
//           details: {
//             cost: "",
//             country: "",
//             city: "",
//           },
//         },
//       },
//       geolocation: {
//         campus: "",
//         country: "",
//       },
//       otherSpecialConditions: {
//         additionalDescription: "",
//         uploadedFiles: [], // Array of File
//       },
//       file: null,
//     };

//   const handleSubmit = (values: typeof initialValues) => {
//     console.log("Submitted Values:", values);

//     dispatch(setCurrentStep(2));
//   };

//   return (
//     <Formik
//       initialValues={initialValues} // Use standalone initialValues
//       validationSchema={validationSchema}
//       onSubmit={(values) => {
//         console.log("Formik Submitted Values:", values);

//         // Synchronize Formik values back to FormContext
//         setFormData((prevData) => ({
//           ...prevData,
//           submitExchangeDetails: values, // Update submitExchangeDetails in FormContext
//         }));

//         handleSubmit(values); // Call your existing handleSubmit function
//       }}
//       enableReinitialize
//     >
//       {({ setFieldValue, errors, isValid, values }) => (
//         <Form className="space-y-6 p-4 md:p-8 bg-white shadow-xl rounded-lg max-w-4xl mx-auto border border-gray-200">
// {/* Title of the Submit Exchange*/}
// <div className="text-center">
//   <h2 className="text-xl md:text-2xl font-bold text-blue-700 mb-4">
//     {t(`Submit An Exchange Offer`)}
//   </h2>
//   <p className="text-gray-600">
//     {t(
//       `Finance Your Projects Or Expenses With Your Unused Services Or Goods!`
//     )}
//   </p>
// </div>

//           {/* Zone 1 Insertion Banner */}
//           <div className="text-center p-5">
//             <h2 className="mb-5 text-lg font-bold">
//               {t("Zone 1 Insertion Banner Advertising")}
//             </h2>
//             <label
//               htmlFor="zoneOneBanner"
//               className="inline-block cursor-pointer p-4 border-2 border-dashed border-gray-400 rounded-lg bg-gray-100 hover:bg-gray-200"
//             >
//               <Image
//                 src={previewZoneOneBanner || "/imagetoselect.png"}
//                 alt="Upload Banner"
//                 className="max-w-full h-auto mx-auto mb-2"
//                 width={100}
//                 height={100}
//               />
//               <p className="text-gray-600">Click to upload</p>
//             </label>
//             <Field name="zoneOneBanner">
//               {({ field }: FieldProps) => (
//                 <input
//                   id="zoneOneBanner"
//                   type="file"
//                   name={field.name}
//                   accept="image/*"
//                   className="hidden"
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const file = event.target.files?.[0] || null;

//                     // Update Formik state
//                     setFieldValue("zoneOneBanner", file);

//                     // Synchronize with FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         zoneOneBanner: file,
//                       },
//                     }));

//                     // Update preview
//                     if (file) {
//                       const reader = new FileReader();
//                       reader.onload = () =>
//                         setPreviewZoneOneBanner(reader.result as string);
//                       reader.readAsDataURL(file);
//                     } else {
//                       setPreviewZoneOneBanner(null);
//                     }
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="zoneOneBanner"
//               component="div"
//               className="text-red-500 text-sm mt-2"
//             />
//           </div>

//           {/* Title */}
//           <div>
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t(`Title of the Offer`)}
//             </label>
//             <Field name="title">
//               {({ field }: FieldProps) => (
//                 <input
//                   {...field}
//                   placeholder="Enter Title"
//                   className="w-full p-2 border rounded-md"
//                   value={values.title} // Use Formik's value
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const newValue = event.target.value;

//                     // Update Formik state
//                     setFieldValue("title", newValue);

//                     // Synchronize with FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         title: newValue,
//                       },
//                     }));
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="title"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Offer Type */}
//           <div>
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t(`What do you Offer`)}
//             </label>
//             <div role="group" className="flex flex-wrap gap-4">
//               <label>
//                 <Field
//                   type="radio"
//                   name="offerType"
//                   value="Good"
//                   checked={values.offerType === "Good"} // Use Formik's value
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const selectedValue = event.target.value;

//                     // Update Formik state
//                     setFieldValue("offerType", selectedValue);

//                     // Synchronize with FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         offerType: selectedValue,
//                       },
//                     }));
//                   }}
//                 />{" "}
//                 Good
//               </label>
//               <label>
//                 <Field
//                   type="radio"
//                   name="offerType"
//                   value="Service"
//                   checked={values.offerType === "Service"} // Use Formik's value
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const selectedValue = event.target.value;

//                     // Update Formik state
//                     setFieldValue("offerType", selectedValue);

//                     // Synchronize with FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         offerType: selectedValue,
//                       },
//                     }));
//                   }}
//                 />{" "}
//                 Service
//               </label>
//             </div>
//             <ErrorMessage
//               name="offerType"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

// {/* Category */}
// <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
//   <div>
//     <label className="block text-gray-700 font-semibold mb-1">
//       {t(`Category`)}
//     </label>
//     <Field
//       as="select"
//       name="category"
//       className="w-full p-2 border rounded-md"
//       value={values.category} // Use Formik's value
//       onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//         const selectedValue = event.target.value;

//         // Update Formik state
//         setFieldValue("category", selectedValue);

//         // Synchronize with FormContext
//         setFormData((prevData) => ({
//           ...prevData,
//           submitExchangeDetails: {
//             ...prevData.submitExchangeDetails,
//             category: selectedValue,
//           },
//         }));
//       }}
//     >
//       <option value="" disabled>
//         {t(`Select Category`)}
//       </option>
//       <option value="Electronics">{t(`Electronics`)}</option>
//       <option value="Health">{t(`Health`)}</option>
//     </Field>
//     <ErrorMessage
//       name="category"
//       component="div"
//       className="text-red-500 text-sm"
//     />
//   </div>
//   <div>
//     <label className="block text-gray-700 font-semibold mb-1">
//       {t(`SubCategory`)}
//     </label>
//     <Field
//       as="select"
//       name="subcategory"
//       className="w-full p-2 border rounded-md"
//       value={values.subcategory} // Use Formik's value
//       onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//         const selectedValue = event.target.value;

//         // Update Formik state
//         setFieldValue("subcategory", selectedValue);

//         // Synchronize with FormContext
//         setFormData((prevData) => ({
//           ...prevData,
//           submitExchangeDetails: {
//             ...prevData.submitExchangeDetails,
//             subcategory: selectedValue,
//           },
//         }));
//       }}
//     >
//       <option value="" disabled>
//         {t(`Select SubCategory`)}
//       </option>
//       <option value="Accessories">{t(`Accessories`)}</option>
//       <option value="Health">{t(`Health`)}</option>
//     </Field>
//     <ErrorMessage
//       name="subcategory"
//       component="div"
//       className="text-red-500 text-sm"
//     />
//   </div>
// </div>

// {/* Featured Product Status */}
// <div>
//   <label className="block text-gray-700 font-semibold mb-1">
//     {t(`FeaturedProductStatus`)}
//   </label>
//   <Field name="featuredProductStatus">
//     {({ field }: FieldProps) => (
//       <select
//         {...field}
//         className="w-full p-2 border rounded-md"
//         value={
//           formData.submitExchangeDetails.featuredProductStatus || ""
//         }
//         onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//           const selectedValue = event.target.value;

//           // Update Formik state
//           setFieldValue("featuredProductStatus", selectedValue);

//           // Update FormContext
//           setFormData((prevData) => ({
//             ...prevData,
//             submitExchangeDetails: {
//               ...prevData.submitExchangeDetails,
//               featuredProductStatus: selectedValue,
//             },
//           }));
//         }}
//       >
//         <option value="" disabled>
//           {t(`Select Status`)}
//         </option>
//         <option value="New">{t(`New`)}</option>
//         <option value="GoodCondition">{t(`Good Condition`)}</option>
//         <option value="Used">{t(`Used`)}</option>
//       </select>
//     )}
//   </Field>
//   <ErrorMessage
//     name="featuredProductStatus"
//     component="div"
//     className="text-red-500 text-sm"
//   />
// </div>

//           {/* Additional Description */}
//           <div>
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t(`Additional Description`)}
//             </label>
//             <Field name="additionalDescription">
//               {({ field }: FieldProps) => (
//                 <textarea
//                   {...field}
//                   placeholder="Enter additional details about your offer"
//                   className="w-full p-2 border rounded-md"
//                   value={
//                     formData.submitExchangeDetails.additionalDescription || ""
//                   }
//                   onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {
//                     const value = event.target.value;

//                     // Update FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         additionalDescription: value,
//                       },
//                     }));

//                     // Update Formik state
//                     setFieldValue("additionalDescription", value);
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="additionalDescription"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

// {/* Images to Select */}
// <div className="mt-4">
//   <label
//     htmlFor="offer-images"
//     className="block text-sm font-semibold text-gray-700 mb-2"
//   >
//     {t(`Upload Any Images Of The Offer`)}
//   </label>
//   <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
//     {Array.from({ length: 3 }).map((_, index) => (
//       <div
//         key={index}
//         className="flex flex-col items-center space-y-2"
//       >
//         <label
//           htmlFor={`offer-image-${index}`}
//           className="cursor-pointer flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-md hover:border-blue-400 hover:bg-gray-50"
//         >
//           <Image
//             src={previewImages[index] || "/imagetoselect.png"} // Show dynamic preview or default placeholder
//             alt="Select Image"
//             className="object-cover w-20 h-20 rounded-md"
//             width={100}
//             height={100}
//           />
//           <span className="text-sm text-gray-500">Select Image</span>
//         </label>
//         <Field name={`images[${index}]`}>
//           {({ field }: FieldProps) => (
//             <input
//               {...field}
//               type="file"
//               id={`offer-image-${index}`}
//               accept="image/*"
//               className="hidden"
//               onChange={(event) => {
//                 const file = event.target.files?.[0] || null;

//                 // Update Formik state
//                 setFieldValue(`images[${index}]`, file);

//                 // Update FormContext
//                 setFormData((prevData) => {
//                   const updatedImages = [
//                     ...prevData.submitExchangeDetails.images,
//                   ];
//                   updatedImages[index] = file || null; // Use null as the fallback
//                   return {
//                     ...prevData,
//                     submitExchangeDetails: {
//                       ...prevData.submitExchangeDetails,
//                       images: updatedImages,
//                     },
//                   };
//                 });

//                 // Update preview
//                 if (file) {
//                   const reader = new FileReader();
//                   reader.onload = () => {
//                     setPreviewImages((prev) => {
//                       const updatedPreviews = [...prev];
//                       updatedPreviews[index] =
//                         reader.result as string;
//                       return updatedPreviews;
//                     });
//                   };
//                   reader.readAsDataURL(file);
//                 } else {
//                   setPreviewImages((prev) => {
//                     const updatedPreviews = [...prev];
//                     updatedPreviews[index] = null;
//                     return updatedPreviews;
//                   });
//                 }
//               }}
//               value={undefined} // Ensure it is always undefined for uncontrolled input
//             />
//           )}
//         </Field>
//       </div>
//     ))}
//   </div>
//   <ErrorMessage
//     name="images"
//     component="div"
//     className="text-red-500 text-sm mt-2"
//   />
// </div>

// {/* Offer Dates */}
// <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
//   <div>
//     <label className="block text-gray-700 font-semibold mb-1">
//       {t(`OfferStartDate`)}
//     </label>
//     <Field name="startDate">
//       {({ field }: FieldProps) => (
//         <input
//           {...field}
//           type="date"
//           className="w-full p-2 border rounded-md"
//           value={
//             formData.submitExchangeDetails.startDate instanceof
//               Date &&
//             !isNaN(formData.submitExchangeDetails.startDate.getTime())
//               ? formData.submitExchangeDetails.startDate
//                   .toISOString()
//                   .split("T")[0]
//               : ""
//           }
//           onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//             const value = event.target.value
//               ? new Date(event.target.value)
//               : null;

//             // Update FormContext
//             setFormData((prevData) => ({
//               ...prevData,
//               submitExchangeDetails: {
//                 ...prevData.submitExchangeDetails,
//                 startDate: value,
//               },
//             }));

//             // Update Formik state
//             setFieldValue("startDate", value);
//           }}
//         />
//       )}
//     </Field>
//     <ErrorMessage
//       name="startDate"
//       component="div"
//       className="text-red-500 text-sm"
//     />
//   </div>
//   <div>
//     <label className="block text-gray-700 font-semibold mb-1">
//       {t(`OfferEndDate`)}
//     </label>
//     <Field name="endDate">
//       {({ field }: FieldProps) => (
//         <input
//           {...field}
//           type="date"
//           className="w-full p-2 border rounded-md"
//           value={
//             formData.submitExchangeDetails.endDate instanceof Date &&
//             !isNaN(formData.submitExchangeDetails.endDate.getTime())
//               ? formData.submitExchangeDetails.endDate
//                   .toISOString()
//                   .split("T")[0]
//               : ""
//           }
//           onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//             const value = event.target.value
//               ? new Date(event.target.value)
//               : null;

//             // Update FormContext
//             setFormData((prevData) => ({
//               ...prevData,
//               submitExchangeDetails: {
//                 ...prevData.submitExchangeDetails,
//                 endDate: value,
//               },
//             }));

//             // Update Formik state
//             setFieldValue("endDate", value);
//           }}
//         />
//       )}
//     </Field>
//     <ErrorMessage
//       name="endDate"
//       component="div"
//       className="text-red-500 text-sm"
//     />
//   </div>
// </div>

//           {/* Form of Exchange */}
//           <div>
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t(`FormOfExchange`)}
//             </label>
//             <Field name="formOfExchange">
//               {({ field }: FieldProps) => (
//                 <select
//                   {...field}
//                   className="w-full p-2 border rounded-md"
//                   value={formData.submitExchangeDetails.formOfExchange || ""}
//                   onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                     const value = event.target.value;

//                     // Update FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         formOfExchange: value,
//                       },
//                     }));

//                     // Update Formik state
//                     setFieldValue("formOfExchange", value);
//                   }}
//                 >
//                   <option value="" disabled>
//                     {t(`Select Form of Exchange`)}
//                   </option>
//                   <option value="Exchange">{t(`Exchange`)}</option>
//                   <option value="Classic Sale">{t(`Classic Sale`)}</option>
//                   <option value="Auction">{t(`Auction`)}</option>
//                   <option value="Donation">{t(`Donation`)}</option>
//                 </select>
//               )}
//             </Field>
//             <ErrorMessage
//               name="formOfExchange"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

// {/* Material Conditions */}
// <div className="space-y-4">
//   <h3 className="text-lg font-bold text-center">
//     {t("Material conditions of the exchange")}
//   </h3>
//   <div>
//     <label className="font-semibold text-gray-700">
//       {t("Estimated value of the exchange")}
//     </label>
//     <Field name="materialConditions.estimatedValue">
//       {({ field }: FieldProps) => (
//         <input
//           {...field}
//           type="number"
//           className="w-full p-2 border rounded-md"
//           value={
//             formData.submitExchangeDetails.materialConditions
//               .estimatedValue || ""
//           }
//           onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//             const value = event.target.value;

//             // Update FormContext
//             setFormData((prevData) => ({
//               ...prevData,
//               submitExchangeDetails: {
//                 ...prevData.submitExchangeDetails,
//                 materialConditions: {
//                   ...prevData.submitExchangeDetails
//                     .materialConditions,
//                   estimatedValue: value,
//                 },
//               },
//             }));

//             // Update Formik state
//             setFieldValue("materialConditions.estimatedValue", value);
//           }}
//         />
//       )}
//     </Field>
//     <ErrorMessage
//       name="materialConditions.estimatedValue"
//       component="div"
//       className="text-red-500 text-sm"
//     />

//     <div>
//       <label className="block text-gray-700 mb-1">
//         {t("Deposit Payment for booking")}
//       </label>
//       <div role="group" className="flex gap-4">
//         <label>
//           <Field
//             type="radio"
//             name="materialConditions.decision"
//             value="yes"
//             checked={
//               formData.submitExchangeDetails.materialConditions
//                 .decision === "yes"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   materialConditions: {
//                     ...prevData.submitExchangeDetails
//                       .materialConditions,
//                     decision: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               setFieldValue("materialConditions.decision", value);
//             }}
//           />{" "}
//           {t("yes")}
//         </label>
//         <label>
//           <Field
//             type="radio"
//             name="materialConditions.decision"
//             value="no"
//             checked={
//               formData.submitExchangeDetails.materialConditions
//                 .decision === "no"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   materialConditions: {
//                     ...prevData.submitExchangeDetails
//                       .materialConditions,
//                     decision: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               setFieldValue("materialConditions.decision", value);
//             }}
//           />{" "}
//           {t("no")}
//         </label>
//       </div>
//       <ErrorMessage
//         name="materialConditions.decision"
//         component="div"
//         className="text-red-500 text-sm"
//       />
//     </div>

//     {formData.submitExchangeDetails.materialConditions.decision ===
//       "yes" && (
//       <div className="mt-4">
//         <label
//           htmlFor="percentage"
//           className="block text-gray-700 font-semibold mb-1"
//         >
//           {t("DepositPercentage (%)")}
//         </label>
//         <Field name="materialConditions.depositPayment.percentage">
//           {({ field }: FieldProps) => (
//             <input
//               {...field}
//               type="number"
//               className="w-full p-2 border rounded-md"
//               min={0}
//               max={100}
//               value={
//                 formData.submitExchangeDetails.materialConditions
//                   .depositPayment.percentage || ""
//               }
//               onChange={(
//                 event: React.ChangeEvent<HTMLInputElement>
//               ) => {
//                 const value = event.target.value;

//                 // Update FormContext
//                 setFormData((prevData) => ({
//                   ...prevData,
//                   submitExchangeDetails: {
//                     ...prevData.submitExchangeDetails,
//                     materialConditions: {
//                       ...prevData.submitExchangeDetails
//                         .materialConditions,
//                       depositPayment: {
//                         ...prevData.submitExchangeDetails
//                           .materialConditions.depositPayment,
//                         percentage: value,
//                       },
//                     },
//                   },
//                 }));

//                 // Update Formik state
//                 setFieldValue(
//                   "materialConditions.depositPayment.percentage",
//                   value
//                 );
//               }}
//             />
//           )}
//         </Field>
//         <ErrorMessage
//           name="materialConditions.depositPayment.percentage"
//           component="div"
//           className="text-red-500 text-sm"
//         />
//       </div>
//     )}
//   </div>
// </div>

//           {/* Other Contingent Coverage Required */}
//           <div className="font-semibold">
//             <label htmlFor="materialConditions.otherContingentCoverageRequired">
//               {t(`Other Contingent Coverage Required`)}
//             </label>
//             <Field name="materialConditions.otherContingentCoverageRequired">
//               {({ field }: FieldProps) => (
//                 <input
//                   {...field}
//                   type="text"
//                   className="w-full p-2 border rounded-md"
//                   value={
//                     formData.submitExchangeDetails.materialConditions
//                       .otherContingentCoverageRequired || ""
//                   }
//                   onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
//                     const value = event.target.value;

//                     // Update FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         materialConditions: {
//                           ...prevData.submitExchangeDetails.materialConditions,
//                           otherContingentCoverageRequired: value,
//                         },
//                       },
//                     }));

//                     // Update Formik state
//                     field.onChange(event);
//                   }}
//                 />
//               )}
//             </Field>
//             <ErrorMessage
//               name="materialConditions.otherContingentCoverageRequired"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

// {/* Guarantees */}
// <div className="mt-4">
//   <label className="block text-gray-700 font-semibold mb-1">
//     {t("MoneyBackGuarantee")}
//   </label>
//   <div role="group" className="flex gap-4">
//     <label>
//       <Field name="guarantees.moneyBackGuarantee">
//         {({ field }: FieldProps) => (
//           <input
//             {...field}
//             type="radio"
//             value="yes"
//             checked={
//               formData.submitExchangeDetails.guarantees
//                 .moneyBackGuarantee === "yes"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   guarantees: {
//                     ...prevData.submitExchangeDetails.guarantees,
//                     moneyBackGuarantee: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               field.onChange(event);
//             }}
//           />
//         )}
//       </Field>
//       {t("yes")}
//     </label>
//     <label>
//       <Field name="guarantees.moneyBackGuarantee">
//         {({ field }: FieldProps) => (
//           <input
//             {...field}
//             type="radio"
//             value="no"
//             checked={
//               formData.submitExchangeDetails.guarantees
//                 .moneyBackGuarantee === "no"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   guarantees: {
//                     ...prevData.submitExchangeDetails.guarantees,
//                     moneyBackGuarantee: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               field.onChange(event);
//             }}
//           />
//         )}
//       </Field>
//       {t("no")}
//     </label>
//   </div>
//   <ErrorMessage
//     name="guarantees.moneyBackGuarantee"
//     component="div"
//     className="text-red-500 text-sm"
//   />
// </div>

// <div className="mt-4">
//   <label className="block text-gray-700 font-semibold mb-1">
//     {t("SatisfactionGuarantee")}
//   </label>
//   <div role="group" className="flex gap-4">
//     <label>
//       <Field name="guarantees.satisfactionGuarantee">
//         {({ field }: FieldProps) => (
//           <input
//             {...field}
//             type="radio"
//             value="yes"
//             checked={
//               formData.submitExchangeDetails.guarantees
//                 .satisfactionGuarantee === "yes"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   guarantees: {
//                     ...prevData.submitExchangeDetails.guarantees,
//                     satisfactionGuarantee: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               field.onChange(event);
//             }}
//           />
//         )}
//       </Field>
//       {t("yes")}
//     </label>
//     <label>
//       <Field name="guarantees.satisfactionGuarantee">
//         {({ field }: FieldProps) => (
//           <input
//             {...field}
//             type="radio"
//             value="no"
//             checked={
//               formData.submitExchangeDetails.guarantees
//                 .satisfactionGuarantee === "no"
//             }
//             onChange={(
//               event: React.ChangeEvent<HTMLInputElement>
//             ) => {
//               const value = event.target.value;

//               // Update FormContext
//               setFormData((prevData) => ({
//                 ...prevData,
//                 submitExchangeDetails: {
//                   ...prevData.submitExchangeDetails,
//                   guarantees: {
//                     ...prevData.submitExchangeDetails.guarantees,
//                     satisfactionGuarantee: value,
//                   },
//                 },
//               }));

//               // Update Formik state
//               field.onChange(event);
//             }}
//           />
//         )}
//       </Field>
//       {t("no")}
//     </label>
//   </div>
//   <ErrorMessage
//     name="guarantees.satisfactionGuarantee"
//     component="div"
//     className="text-red-500 text-sm"
//   />
// </div>

//           {/* Payment Details */}
//           <div className="mt-4">
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t("DesiredPaymentForm")}
//             </label>
//             <Field name="paymentDetails.desiredPaymentForm">
//               {({ field }: FieldProps) => (
//                 <select
//                   {...field}
//                   className="w-full p-2 border rounded-md"
//                   value={
//                     formData.submitExchangeDetails.paymentDetails
//                       .desiredPaymentForm
//                   } // Sync with FormContext
//                   onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                     const value = event.target.value;

//                     // Update FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         paymentDetails: {
//                           ...prevData.submitExchangeDetails.paymentDetails,
//                           desiredPaymentForm: value,
//                         },
//                       },
//                     }));

//                     // Update Formik state
//                     field.onChange(event);
//                   }}
//                 >
//                   <option value="" disabled>
//                     {t("Select Payment Form")}
//                   </option>
//                   <option value="exchange-sum">
//                     {t("Exchange + or - Additional Sum")}
//                   </option>
//                   <option value="exchange-service">
//                     {t("Exchange + or - Benefit or Service")}
//                   </option>
//                 </select>
//               )}
//             </Field>
//             <ErrorMessage
//               name="paymentDetails.desiredPaymentForm"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           <div className="mt-4">
//             <label className="block text-gray-700 font-semibold mb-1">
//               {t("DesiredPaymentType")}
//             </label>
//             <Field name="paymentDetails.desiredPaymentType">
//               {({ field }: FieldProps) => (
//                 <select
//                   {...field}
//                   className="w-full p-2 border rounded-md"
//                   value={
//                     formData.submitExchangeDetails.paymentDetails
//                       .desiredPaymentType
//                   } // Sync with FormContext
//                   onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {
//                     const value = event.target.value;

//                     // Update FormContext
//                     setFormData((prevData) => ({
//                       ...prevData,
//                       submitExchangeDetails: {
//                         ...prevData.submitExchangeDetails,
//                         paymentDetails: {
//                           ...prevData.submitExchangeDetails.paymentDetails,
//                           desiredPaymentType: value,
//                         },
//                       },
//                     }));

//                     // Update Formik state
//                     field.onChange(event);
//                   }}
//                 >
//                   <option value="" disabled>
//                     {t("Select Payment Type")}
//                   </option>
//                   <option value="hand-to-hand">{t("handToHand")}</option>
//                   <option value="before-delivery">
//                     {t("Exchange & Payment Before Delivery")}
//                   </option>
//                   <option value="after-delivery">
//                     {t("Exchange & Payment After Delivery")}
//                   </option>
//                 </select>
//               )}
//             </Field>
//             <ErrorMessage
//               name="paymentDetails.desiredPaymentType"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Delivery Conditions */}
//           <div className="mt-6">
//             <h2 className="text-xl font-bold text-center mb-4">
//               {t("DeliveryConditions")}
//             </h2>

//             {/* Pickup */}
//             <div className="mt-4">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 {t("Pickup")}
//               </label>
//               <div className="flex gap-4">
//                 <label className="flex items-center">
//                   <Field name="deliveryConditions.pickup.allowed">
//                     {({ field }: FieldProps) => (
//                       <input
//                         {...field}
//                         type="radio"
//                         value="yes"
//                         checked={
//                           formData.submitExchangeDetails.deliveryConditions
//                             .pickup.allowed === "yes"
//                         }
//                         className="mr-2"
//                         onChange={(
//                           event: React.ChangeEvent<HTMLInputElement>
//                         ) => {
//                           const value = event.target.value as "yes" | "no";
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               deliveryConditions: {
//                                 ...prevData.submitExchangeDetails
//                                   .deliveryConditions,
//                                 pickup: {
//                                   ...prevData.submitExchangeDetails
//                                     .deliveryConditions.pickup,
//                                   allowed: value,
//                                 },
//                               },
//                             },
//                           }));
//                           field.onChange(event);
//                         }}
//                       />
//                     )}
//                   </Field>
//                   {t("yes")}
//                 </label>

//                 <label className="flex items-center">
//                   <Field name="deliveryConditions.pickup.allowed">
//                     {({ field }: FieldProps) => (
//                       <input
//                         {...field}
//                         type="radio"
//                         value="no"
//                         checked={
//                           formData.submitExchangeDetails.deliveryConditions
//                             .pickup.allowed === "no"
//                         }
//                         className="mr-2"
//                         onChange={(
//                           event: React.ChangeEvent<HTMLInputElement>
//                         ) => {
//                           const value = event.target.value as "yes" | "no";
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               deliveryConditions: {
//                                 ...prevData.submitExchangeDetails
//                                   .deliveryConditions,
//                                 pickup: {
//                                   ...prevData.submitExchangeDetails
//                                     .deliveryConditions.pickup,
//                                   allowed: value,
//                                 },
//                               },
//                             },
//                           }));
//                           field.onChange(event);
//                         }}
//                       />
//                     )}
//                   </Field>
//                   {t("no")}
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="deliveryConditions.pickup.allowed"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />

//               {formData.submitExchangeDetails.deliveryConditions.pickup
//                 .allowed === "yes" && (
//                 <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
//                   {(["address", "country", "city", "campus"] as const).map(
//                     (key) => (
//                       <div key={key} className="mt-4">
//                         <label
//                           htmlFor={`deliveryConditions.pickup.details.${key}`}
//                           className="block text-gray-700 font-semibold mb-1"
//                         >
//                           {t(key.charAt(0).toUpperCase() + key.slice(1))}{" "}
//                           {/* Capitalized label */}
//                         </label>
//                         <Field
//                           name={`deliveryConditions.pickup.details.${key}`}
//                         >
//                           {({ field }: { field: FieldInputProps<string> }) => (
//                             <input
//                               {...field}
//                               id={`deliveryConditions.pickup.details.${key}`} // Add id for accessibility
//                               type="text"
//                               className="w-full p-2 border rounded-md"
//                               value={
//                                 formData.submitExchangeDetails
//                                   .deliveryConditions.pickup.details[key]
//                               }
//                               onChange={(
//                                 event: React.ChangeEvent<HTMLInputElement>
//                               ) => {
//                                 const value = event.target.value;

//                                 // Update FormContext
//                                 setFormData((prevData) => ({
//                                   ...prevData,
//                                   submitExchangeDetails: {
//                                     ...prevData.submitExchangeDetails,
//                                     deliveryConditions: {
//                                       ...prevData.submitExchangeDetails
//                                         .deliveryConditions,
//                                       pickup: {
//                                         ...prevData.submitExchangeDetails
//                                           .deliveryConditions.pickup,
//                                         details: {
//                                           ...prevData.submitExchangeDetails
//                                             .deliveryConditions.pickup.details,
//                                           [key]: value,
//                                         },
//                                       },
//                                     },
//                                   },
//                                 }));

//                                 // Update Formik state
//                                 field.onChange(event);
//                               }}
//                             />
//                           )}
//                         </Field>
//                         <ErrorMessage
//                           name={`deliveryConditions.pickup.details.${key}`}
//                           component="div"
//                           className="text-red-500 text-sm"
//                         />
//                       </div>
//                     )
//                   )}
//                 </div>
//               )}
//             </div>

//             {/* Delivery */}
//             <div className="mt-4">
//               <label className="block text-gray-700 font-semibold mb-1">
//                 {t("Delivery")}
//               </label>
//               <div className="flex gap-4">
//                 <label className="flex items-center">
//                   <Field name="deliveryConditions.delivery.allowed">
//                     {({ field }: FieldProps) => (
//                       <input
//                         {...field}
//                         type="radio"
//                         value="yes"
//                         checked={
//                           formData.submitExchangeDetails.deliveryConditions
//                             .delivery.allowed === "yes"
//                         }
//                         className="mr-2"
//                         onChange={(
//                           event: React.ChangeEvent<HTMLInputElement>
//                         ) => {
//                           const value = event.target.value as "yes" | "no";
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               deliveryConditions: {
//                                 ...prevData.submitExchangeDetails
//                                   .deliveryConditions,
//                                 delivery: {
//                                   ...prevData.submitExchangeDetails
//                                     .deliveryConditions.delivery,
//                                   allowed: value,
//                                 },
//                               },
//                             },
//                           }));
//                           field.onChange(event);
//                         }}
//                       />
//                     )}
//                   </Field>
//                   {t("yes")}
//                 </label>

//                 <label className="flex items-center">
//                   <Field name="deliveryConditions.delivery.allowed">
//                     {({ field }: FieldProps) => (
//                       <input
//                         {...field}
//                         type="radio"
//                         value="no"
//                         checked={
//                           formData.submitExchangeDetails.deliveryConditions
//                             .delivery.allowed === "no"
//                         }
//                         className="mr-2"
//                         onChange={(
//                           event: React.ChangeEvent<HTMLInputElement>
//                         ) => {
//                           const value = event.target.value as "yes" | "no";
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               deliveryConditions: {
//                                 ...prevData.submitExchangeDetails
//                                   .deliveryConditions,
//                                 delivery: {
//                                   ...prevData.submitExchangeDetails
//                                     .deliveryConditions.delivery,
//                                   allowed: value,
//                                 },
//                               },
//                             },
//                           }));
//                           field.onChange(event);
//                         }}
//                       />
//                     )}
//                   </Field>
//                   {t("no")}
//                 </label>
//               </div>
//               <ErrorMessage
//                 name="deliveryConditions.delivery.allowed"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />

//               {formData.submitExchangeDetails.deliveryConditions.delivery
//                 .allowed === "yes" && (
//                 <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
//                   {(["cost", "country", "city"] as const).map((key) => (
//                     <div key={key}>
//                       <label className="block text-gray-700 mb-1">
//                         {t(key.charAt(0).toUpperCase() + key.slice(1))}
//                       </label>
//                       <Field
//                         name={`deliveryConditions.delivery.details.${key}`}
//                       >
//                         {({ field }: { field: FieldInputProps<string> }) => (
//                           <input
//                             {...field}
//                             type="text"
//                             className="w-full p-2 border rounded-md"
//                             value={
//                               formData.submitExchangeDetails.deliveryConditions
//                                 .delivery.details[key]
//                             }
//                             onChange={(
//                               event: React.ChangeEvent<HTMLInputElement>
//                             ) => {
//                               const value = event.target.value;

//                               // Update FormContext
//                               setFormData((prevData) => ({
//                                 ...prevData,
//                                 submitExchangeDetails: {
//                                   ...prevData.submitExchangeDetails,
//                                   deliveryConditions: {
//                                     ...prevData.submitExchangeDetails
//                                       .deliveryConditions,
//                                     delivery: {
//                                       ...prevData.submitExchangeDetails
//                                         .deliveryConditions.delivery,
//                                       details: {
//                                         ...prevData.submitExchangeDetails
//                                           .deliveryConditions.delivery.details,
//                                         [key]: value,
//                                       },
//                                     },
//                                   },
//                                 },
//                               }));

//                               // Update Formik state
//                               field.onChange(event);
//                             }}
//                           />
//                         )}
//                       </Field>
//                     </div>
//                   ))}
//                 </div>
//               )}
//             </div>
//           </div>

//           {/* Geolocation */}
//           <div className="mt-4">
//             <h2 className="text-xl font-bold text-center mb-4">
//               {t("Geolocation")}
//             </h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//               {(["campus", "country"] as const).map((key) => (
//                 <div key={key} className="mt-4">
//                   {/* Label */}
//                   <label
//                     htmlFor={`geolocation.${key}`}
//                     className="block text-gray-700 font-semibold mb-1"
//                   >
//                     {t(key.charAt(0).toUpperCase() + key.slice(1))}{" "}
//                     {/* Capitalized label */}
//                   </label>
//                   {/* Input Field */}
//                   <Field name={`geolocation.${key}`}>
//                     {({ field }: { field: FieldInputProps<string> }) => (
//                       <input
//                         {...field}
//                         id={`geolocation.${key}`} // Add id for accessibility
//                         type="text"
//                         className="w-full p-2 border rounded-md"
//                         value={
//                           formData.submitExchangeDetails.geolocation[key] || "" // Ensure controlled value
//                         }
//                         onChange={(
//                           event: React.ChangeEvent<HTMLInputElement>
//                         ) => {
//                           const value = event.target.value;

//                           // Update FormContext
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               geolocation: {
//                                 ...prevData.submitExchangeDetails.geolocation,
//                                 [key]: value,
//                               },
//                             },
//                           }));

//                           // Update Formik state
//                           field.onChange(event);
//                         }}
//                       />
//                     )}
//                   </Field>
//                   {/* Error Message */}
//                   <ErrorMessage
//                     name={`geolocation.${key}`}
//                     component="div"
//                     className="text-red-500 text-sm"
//                   />
//                 </div>
//               ))}
//             </div>
//           </div>

//           {/* Other Special Conditions */}
//           <div className="mt-4">
//             <h2 className="text-xl font-bold text-center mb-4">
//               {t("Other Special Conditions")}
//             </h2>
//             <div>
//               <label
//                 htmlFor="otherSpecialConditions.additionalDescription"
//                 className="block text-gray-700 font-semibold mb-1"
//               >
//                 {t("Additional Description of the payment or Delivery Method")}
//               </label>
//               <Field name="otherSpecialConditions.additionalDescription">
//                 {({
//                   field, // Access Formik field props
//                 }: {
//                   field: FieldInputProps<string>;
//                 }) => (
//                   <textarea
//                     {...field} // Bind Formik field props
//                     id="otherSpecialConditions.additionalDescription"
//                     rows={4}
//                     className="w-full p-3 border rounded-md resize-none"
//                     onChange={(
//                       event: React.ChangeEvent<HTMLTextAreaElement>
//                     ) => {
//                       const value = event.target.value;

//                       // Update FormContext
//                       setFormData((prevData) => ({
//                         ...prevData,
//                         submitExchangeDetails: {
//                           ...prevData.submitExchangeDetails,
//                           otherSpecialConditions: {
//                             ...prevData.submitExchangeDetails
//                               .otherSpecialConditions,
//                             additionalDescription: value,
//                           },
//                         },
//                       }));

//                       // Update Formik state
//                       field.onChange(event);
//                     }}
//                     value={
//                       formData.submitExchangeDetails.otherSpecialConditions
//                         .additionalDescription
//                     } // Sync with FormContext
//                   />
//                 )}
//               </Field>
//               <ErrorMessage
//                 name="otherSpecialConditions.additionalDescription"
//                 component="div"
//                 className="text-red-500 text-sm"
//               />
//             </div>
//           </div>

//           {/* File Upload */}
//           <div className="mt-4">
//             <label
//               htmlFor="fileUpload"
//               className="block text-gray-700 font-semibold mb-1"
//             >
//               {t("uploadFile")}
//             </label>
//             <div className="flex items-center space-x-6">
//               <label
//                 htmlFor="fileUpload"
//                 className="flex items-center justify-center w-full p-6 border border-gray-300 rounded-md cursor-pointer hover:bg-gray-100"
//               >
//                 <Image
//                   src={previewFileIcon || "/documents.png"} // Dynamic preview based on selected file or default
//                   alt={t("uploadIconAlt")}
//                   width={50}
//                   height={50}
//                   className="mr-2"
//                 />
//                 <span className="text-gray-600 text-base">
//                   {selectedFileName || t("chooseFile")}
//                 </span>
//               </label>
//               <Field name="otherSpecialConditions.uploadedFiles">
//                 {({
//                   field,
//                   form,
//                 }: {
//                   field: FieldInputProps<ProductForServiceFormContextType>;
//                   form: FormikProps<ProductForServiceFormContextType>;
//                 }) => (
//                   <>
//                     <input
//                       id="fileUpload"
//                       name={field.name}
//                       type="file"
//                       className="hidden"
//                       accept=".jpeg,.jpg,.png,.pdf,.doc,.docx"
//                       onChange={(
//                         event: React.ChangeEvent<HTMLInputElement>
//                       ) => {
//                         const file = event.target.files?.[0];
//                         if (file) {
//                           console.log("Selected file type:", file.type);
//                           console.log("Selected file name:", file.name);

//                           // Update Formik field value
//                           form.setFieldValue(
//                             "otherSpecialConditions.uploadedFiles",
//                             [file] // Replace with the selected file
//                           );

//                           // Update FormContext value
//                           setFormData((prevData) => ({
//                             ...prevData,
//                             submitExchangeDetails: {
//                               ...prevData.submitExchangeDetails,
//                               otherSpecialConditions: {
//                                 ...prevData.submitExchangeDetails
//                                   .otherSpecialConditions,
//                                 uploadedFiles: [file], // Replace with the selected file
//                               },
//                             },
//                           }));

//                           // Update preview
//                           const reader = new FileReader();
//                           reader.onload = () => {
//                             setPreviewFileIcon(
//                               file.type === "application/pdf"
//                                 ? "/pdf.png"
//                                 : ["doc", "docx"].includes(
//                                     file.name.split(".").pop()!.toLowerCase()
//                                   )
//                                 ? "/word.png"
//                                 : "/documents.png"
//                             );
//                             setSelectedFileName(file.name);
//                           };
//                           reader.readAsDataURL(file);
//                         }
//                       }}
//                     />
//                   </>
//                 )}
//               </Field>
//             </div>
//             <ErrorMessage
//               name="otherSpecialConditions.uploadedFiles"
//               component="div"
//               className="text-red-500 text-sm"
//             />
//           </div>

//           {/* Submit Button */}
//           <div className="flex justify-end">
//             <button
//               type="submit"
//               className="bg-blue-600 text-white px-4 py-2 rounded-md"
//               onClick={() => console.log("Submit button clicked")}
//             >
//               Next
//             </button>
//           </div>
//           {/* Debugging Section */}
//           <pre>{JSON.stringify(errors, null, 2)}</pre>
//           <p>Form is {isValid ? "valid" : "invalid"}</p>
//         </Form>
//       )}
//     </Formik>
//   );
// };

// export default SubmitexchangeForm;
