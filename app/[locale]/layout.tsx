import { NextIntlClientProvider } from "next-intl";
import { notFound } from "next/navigation";
import localFont from "next/font/local";
import React from "react";
import "../globals.css";
import { Providers } from "../Provider";
import ReduxProvider from "@/store/ReduxProvider";
import LanguageSwitcher from "../components/LanguageSwitcher";

// Load custom fonts
const geistSans = localFont({
  src: "../fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "../fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// Function to load translations

// async function getMessages(locale: string) {
//   try {
//     // Load all translation files
//     const commonMessages = (
//       await import(`../../../locales/${locale}/common.json`)
//     ).default;
//     const registerMessages = (
//       await import(`../../../locales/${locale}/register.json`)
//     ).default;

//     // Merge the messages into a single object
//     const messages = {
//       ...commonMessages,
//       register: registerMessages,
//     };

//     return messages;
//   } catch (error) {
//     console.error(`Error loading translations for locale "${locale}":`, error);
//     return null;
//   }
// }

async function getMessages(locale: string) {
  try {
    const messages = (await import(`../../locales/${locale}/common.json`))
      .default;
    return messages;
  } catch (error) {
    console.error(`Error loading translations for locale "${locale}":`, error);
    return null;
  }
}

// `params` needs to be awaited
export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const { locale } = params; // Locale is already available in params
  const messages = await getMessages(locale);

  if (!messages) {
    notFound(); // Redirect to a 404 page if locale messages are missing
  }

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          <ReduxProvider>
            <NextIntlClientProvider locale={locale} messages={messages}>
              <LanguageSwitcher />
              {children}
            </NextIntlClientProvider>
          </ReduxProvider>
        </Providers>
      </body>
    </html>
  );
}

// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "../globals.css";
// import { Providers } from "../Provider";
// import ReduxProvider from "@/store/ReduxProvider";
// import { NextIntlClientProvider } from "next-intl"; // Import NextIntl provider
// import { headers } from "next/headers"; // Import headers for async use
// import { notFound } from "next/navigation";

// const geistSans = localFont({
//   src: "../fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "../fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// // Helper function to load translations
// async function getMessages(locale: string) {
//   try {
//     const messages = (await import(`../../locales/${locale}/common.json`))
//       .default;
//     return messages;
//   } catch (error) {
//     console.error(`Error loading translations for locale "${locale}":`, error);
//     return null;
//   }
// }

// export default async function RootLayout({
//   children,
// }: {
//   children: React.ReactNode;
// }) {
//   const locale = headers().get("X-NEXT-INTL-LOCALE") || "en"; // Get locale from headers
//   const messages = await getMessages(locale);

//   if (!messages) {
//     notFound(); // Show 404 if locale translations are not found
//   }

//   return (
//     <html lang={locale}>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         <ReduxProvider>
//           <NextIntlClientProvider locale={locale} messages={messages}>
//             <Providers>{children}</Providers>
//           </NextIntlClientProvider>
//         </ReduxProvider>
//       </body>
//     </html>
//   );
// }

//og
// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "../globals.css";
// import { Providers } from "../Provider";
// import { Provider } from "react-redux";
// import { store } from "@/store/store";
// import ReduxProvider from "@/store/ReduxProvider";
// import { NextIntlClientProvider } from "next-intl";
// import { getMessages } from "next-intl/server";

// const geistSans = localFont({
//   src: "../fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "../fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default async function RootLayout({
//   children,
//   params: { locale },
// }: Readonly<{
//   children: React.ReactNode;
//   params: { locale: string };
// }>) {
//   const messages = await getMessages();
//   return (
//     <html lang={locale}>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         <Providers>
//           <ReduxProvider>
//             <NextIntlClientProvider messages={messages}>
//               {children}
//             </NextIntlClientProvider>
//           </ReduxProvider>
//         </Providers>
//       </body>
//     </html>
//   );
// }
